Kind: captions Language: en Okay. Hello everyone. Uh some of you Okay. Hello everyone. Uh some of you Okay. Hello everyone. Uh some of you already knows me. Uh for those who see already knows me. Uh for those who see already knows me. Uh for those who see me for the first time, thank you for me for the first time, thank you for me for the first time, thank you for being here. My name is Premaruski. being here. My name is Premaruski. being here. My name is Premaruski. Please feel free to call me Rogue. Um Please feel free to call me Rogue. Um Please feel free to call me Rogue. Um I'm principal security engineer at Red I'm principal security engineer at Red I'm principal security engineer at Red Hat. And today I would like to briefly Hat. And today I would like to briefly Hat. And today I would like to briefly present how proactive security work present how proactive security work present how proactive security work plays a key role in the trusted supply plays a key role in the trusted supply plays a key role in the trusted supply chain. Today first we will briefly talk about Today first we will briefly talk about Today first we will briefly talk about key differences between proactive and key differences between proactive and key differences between proactive and reactive security activities and how reactive security activities and how reactive security activities and how does the execution of this work look does the execution of this work look does the execution of this work look like today. Then I will show high level like today. Then I will show high level like today. Then I will show high level implementation model for the proactive implementation model for the proactive implementation model for the proactive security activities in the secure security activities in the secure security activities in the secure software development life cycle SDLC or software development life cycle SDLC or software development life cycle SDLC or secure SDLC. secure SDLC. secure SDLC. When we know this, I will present how When we know this, I will present how When we know this, I will present how all proactive activities can be all proactive activities can be all proactive activities can be integrated as a part of the build integrated as a part of the build integrated as a part of the build pipeline based on Red Hat example. And pipeline based on Red Hat example. And pipeline based on Red Hat example. And at the end uh I will show two examples at the end uh I will show two examples at the end uh I will show two examples of the practive vulnerability management of the practive vulnerability management of the practive vulnerability management uh and how AI can help with some of this work. There you go. So what is the proactive security work? So what is the proactive security work? So what is the proactive security work? It's a set of all activities that can be It's a set of all activities that can be It's a set of all activities that can be executed to test verify product executed to test verify product executed to test verify product component before it's released to the component before it's released to the component before it's released to the customer. On this diagram, I listed the customer. On this diagram, I listed the customer. On this diagram, I listed the most typical one activities like SAS most typical one activities like SAS most typical one activities like SAS scanning, dust scanning, thread scanning, dust scanning, thread scanning, dust scanning, thread modeling, malware modeling, malware modeling, malware detection, including regression testing. detection, including regression testing. detection, including regression testing. At at the end, intentionally I added At at the end, intentionally I added At at the end, intentionally I added product metadata verification to make product metadata verification to make product metadata verification to make sure that when you release product sure that when you release product sure that when you release product component, you know exactly what was component, you know exactly what was component, you know exactly what was released, when, what was included. I'm released, when, what was included. I'm released, when, what was included. I'm talking about sbombs, cysaf, vex and in talking about sbombs, cysaf, vex and in talking about sbombs, cysaf, vex and in the future I hope open UX as the future I hope open UX as the future I hope open UX as well. well. well. So how does execution of all this work So how does execution of all this work So how does execution of all this work uh look like today? Uh intentionally I uh look like today? Uh intentionally I uh look like today? Uh intentionally I divided this with three groups divided this with three groups divided this with three groups yesterday, today and tomorrow. In the yesterday, today and tomorrow. In the yesterday, today and tomorrow. In the past we are mostly focused on past we are mostly focused on past we are mostly focused on vulnerability responses. Today uh we vulnerability responses. Today uh we vulnerability responses. Today uh we observe a big pressure for the shift observe a big pressure for the shift observe a big pressure for the shift left approach where we want to do a deep left approach where we want to do a deep left approach where we want to do a deep software testing and verification before software testing and verification before software testing and verification before before that the product software product before that the product software product before that the product software product uh is released. We want to collect as uh is released. We want to collect as uh is released. We want to collect as much in as much as possible much in as much as possible much in as much as possible information from the build process that information from the build process that information from the build process that ensures that uh our build was executed ensures that uh our build was executed ensures that uh our build was executed correctly. uh the build meets our correctly. uh the build meets our correctly. uh the build meets our security controls and our requirements security controls and our requirements security controls and our requirements and is released in a timely manner and and is released in a timely manner and and is released in a timely manner and insecure insecure insecure way. All that work is to make sure that way. All that work is to make sure that way. All that work is to make sure that everyone understands and follow the real everyone understands and follow the real everyone understands and follow the real riskbased riskbased riskbased security not a security security not a security security not a security checkboxing. Okay. Then what remains for checkboxing. Okay. Then what remains for checkboxing. Okay. Then what remains for tomorrow? For the future, we should work tomorrow? For the future, we should work tomorrow? For the future, we should work on a better automation and gating based on a better automation and gating based on a better automation and gating based on all of those findings that we on all of those findings that we on all of those findings that we executed uh that we executed at the test executed uh that we executed at the test executed uh that we executed at the test during the build time to make sure that during the build time to make sure that during the build time to make sure that we can for example more precisely we can for example more precisely we can for example more precisely identify weaknesses and address them, identify weaknesses and address them, identify weaknesses and address them, remediate them before those weaknesses remediate them before those weaknesses remediate them before those weaknesses lead to a vulnerability when the product lead to a vulnerability when the product lead to a vulnerability when the product is already released to the customer is already released to the customer is already released to the customer environment. Let's take a look at all various Let's take a look at all various Let's take a look at all various security testing and their place in the security testing and their place in the security testing and their place in the secure software development life cycle. secure software development life cycle. secure software development life cycle. On this diagram uh I'm showing a On this diagram uh I'm showing a On this diagram uh I'm showing a suggested place for the security testing suggested place for the security testing suggested place for the security testing and verification uh in the specific uh and verification uh in the specific uh and verification uh in the specific uh SDLC phases uh because uh we should know SDLC phases uh because uh we should know SDLC phases uh because uh we should know uh very well when uh where the uh very well when uh where the uh very well when uh where the particular test uh is executed where particular test uh is executed where particular test uh is executed where should be executed to be sure that it's should be executed to be sure that it's should be executed to be sure that it's not executed too early or too late uh in not executed too early or too late uh in not executed too early or too late uh in the development uh process. Uh on this the development uh process. Uh on this the development uh process. Uh on this slide you can see that for example slide you can see that for example slide you can see that for example during the development fast that covers during the development fast that covers during the development fast that covers the build the build time we execute uh the build the build time we execute uh the build the build time we execute uh SAS dust SCA malware scanners uh and at SAS dust SCA malware scanners uh and at SAS dust SCA malware scanners uh and at the end during the release we ensure the end during the release we ensure the end during the release we ensure that the build product that we that we that the build product that we that we that the build product that we that we release to the customers uh is signed release to the customers uh is signed release to the customers uh is signed and we make verify the process the and we make verify the process the and we make verify the process the distribution process to make sure that distribution process to make sure that distribution process to make sure that it's distributed in the secure it's distributed in the secure it's distributed in the secure way. Great. That sounds really good. But way. Great. That sounds really good. But way. Great. That sounds really good. But that what is very that what is very that what is very important. We should make sure that all important. We should make sure that all important. We should make sure that all this practive work should be executed as this practive work should be executed as this practive work should be executed as a part of the build and release process. a part of the build and release process. a part of the build and release process. It shouldn't be just a side process that It shouldn't be just a side process that It shouldn't be just a side process that is next to the build and release is next to the build and release is next to the build and release pipeline. We should make sure that pipeline. We should make sure that pipeline. We should make sure that security is built in in a software security is built in in a software security is built in in a software supply chain. We shouldn't execute all supply chain. We shouldn't execute all supply chain. We shouldn't execute all those security controls and activities those security controls and activities those security controls and activities afterwards when the product is already afterwards when the product is already afterwards when the product is already released because it's too released because it's too released because it's too late. Let's take a late. Let's take a late. Let's take a look how does look like in practice at look how does look like in practice at look how does look like in practice at Red Hat Red Hat Red Hat example. On this diagram you can see how example. On this diagram you can see how example. On this diagram you can see how upstream code is used ingested uh to the upstream code is used ingested uh to the upstream code is used ingested uh to the Red Hat downstream products. Red Hat downstream products. Red Hat downstream products. On the left side there is an upstream On the left side there is an upstream On the left side there is an upstream code then it's included to our pipeline code then it's included to our pipeline code then it's included to our pipeline and during the whole SDLC phases we test and during the whole SDLC phases we test and during the whole SDLC phases we test it and then at the end we know that it's it and then at the end we know that it's it and then at the end we know that it's security uh distributed to our security uh distributed to our security uh distributed to our customers. All this work is executed as customers. All this work is executed as customers. All this work is executed as a part of our product pipeline. So let's a part of our product pipeline. So let's a part of our product pipeline. So let's take a look at a little bit closer at take a look at a little bit closer at take a look at a little bit closer at the pipeline itself. the pipeline itself. the pipeline itself. Today at Red Hat we are actively working Today at Red Hat we are actively working Today at Red Hat we are actively working on a new pipeline call it Conflux which on a new pipeline call it Conflux which on a new pipeline call it Conflux which is an is an is an open-source very important open-source open-source very important open-source open-source very important open-source comprehensive build and test and release comprehensive build and test and release comprehensive build and test and release factory based on Tecton. Uh Tecton is an factory based on Tecton. Uh Tecton is an factory based on Tecton. Uh Tecton is an open-source uh cloudnative CI/CD open-source uh cloudnative CI/CD open-source uh cloudnative CI/CD solution. Uh Conflux is built around solution. Uh Conflux is built around solution. Uh Conflux is built around software supply chain security by software supply chain security by software supply chain security by default. default. default. Conflux meets the uh salsa um build Conflux meets the uh salsa um build Conflux meets the uh salsa um build level three requirements and produces level three requirements and produces level three requirements and produces necessary build three um artifacts. Uh necessary build three um artifacts. Uh necessary build three um artifacts. Uh salsa stands for uh supply chain level salsa stands for uh supply chain level salsa stands for uh supply chain level for software for software for software artifacts framework. As you can see in Conflux, we can build As you can see in Conflux, we can build As you can see in Conflux, we can build run various tests including security run various tests including security run various tests including security scanning and validate the content based scanning and validate the content based scanning and validate the content based on predefined rules during the release on predefined rules during the release on predefined rules during the release process. Let's take a look process. Let's take a look process. Let's take a look closer on the example pipeline. Uh I closer on the example pipeline. Uh I closer on the example pipeline. Uh I Okay, I hope that I hope that you can Okay, I hope that I hope that you can Okay, I hope that I hope that you can see it. This is an example pipeline see it. This is an example pipeline see it. This is an example pipeline starting from the very beginning when we starting from the very beginning when we starting from the very beginning when we start the build to the end when the start the build to the end when the start the build to the end when the build is uh created. Every task in the build is uh created. Every task in the build is uh created. Every task in the pipeline uh is executed in a very pipeline uh is executed in a very pipeline uh is executed in a very controlled way and produce provenence controlled way and produce provenence controlled way and produce provenence data. There's no task that is just data. There's no task that is just data. There's no task that is just executed and there is no evidence what executed and there is no evidence what executed and there is no evidence what happened. happened. happened. We use Tecton chains the Kubernetes uh We use Tecton chains the Kubernetes uh We use Tecton chains the Kubernetes uh custom resources definition uh custom resources definition uh custom resources definition uh controller that allow us to manage controller that allow us to manage controller that allow us to manage supply chain security in Tecton uh supply chain security in Tecton uh supply chain security in Tecton uh together with conform. Conform is together with conform. Conform is together with conform. Conform is another open source project that is used another open source project that is used another open source project that is used to validate uh predefined to validate uh predefined to validate uh predefined uh policy rules that we expect that uh policy rules that we expect that uh policy rules that we expect that particular build or or builds must meet particular build or or builds must meet particular build or or builds must meet to be released to to to to be released to to to to be released to to to customers. Let's take a look at examples customers. Let's take a look at examples customers. Let's take a look at examples two examples how that validation looks two examples how that validation looks two examples how that validation looks like. In this example, we have a build In this example, we have a build In this example, we have a build with excuse me various test results. One of the task does not meet results. One of the task does not meet results. One of the task does not meet the predefined policy rule. It seems the predefined policy rule. It seems the predefined policy rule. It seems that uh not allowed built base image uh that uh not allowed built base image uh that uh not allowed built base image uh was used. That's why that task was was used. That's why that task was was used. That's why that task was executed. The task status is successful. executed. The task status is successful. executed. The task status is successful. result is that this specific task result is that this specific task result is that this specific task confirm that this build was created confirm that this build was created confirm that this build was created based on not approved based image. In based on not approved based image. In based on not approved based image. In this this this case, this particular component as a case, this particular component as a case, this particular component as a part of official product cannot be part of official product cannot be part of official product cannot be released to customers. released to customers. released to customers. Another Another Another example is here where we see that all example is here where we see that all example is here where we see that all tests are okay, everything is fine based tests are okay, everything is fine based tests are okay, everything is fine based on our policy. There's only one test CVE on our policy. There's only one test CVE on our policy. There's only one test CVE scan related um is related to the SCA scan related um is related to the SCA scan related um is related to the SCA scanner that was triggered during the scanner that was triggered during the scanner that was triggered during the build process and this build process and this build process and this particular test has an alert but it's particular test has an alert but it's particular test has an alert but it's not blocking rule. That's why still this not blocking rule. That's why still this not blocking rule. That's why still this build is okay can be released uh to build is okay can be released uh to build is okay can be released uh to customers. But what we what we can do customers. But what we what we can do customers. But what we what we can do with this alert that we see in this on with this alert that we see in this on with this alert that we see in this on on this diagram we found something on this diagram we found something on this diagram we found something should we ignore it or maybe we should should we ignore it or maybe we should should we ignore it or maybe we should do something. This is where we have our do something. This is where we have our do something. This is where we have our proactive and proactive and proactive and reactive work where we can use this reactive work where we can use this reactive work where we can use this information from the build time to information from the build time to information from the build time to improve what is improve what is improve what is um on the other side when the product is um on the other side when the product is um on the other side when the product is already uh already uh already uh released. Let's see how proactive and released. Let's see how proactive and released. Let's see how proactive and reactive vulnerability management can reactive vulnerability management can reactive vulnerability management can can work together. I will try to explain it. On the left I will try to explain it. On the left I will try to explain it. On the left side, we have all work related to the side, we have all work related to the side, we have all work related to the proactive part, the build proactive part, the build proactive part, the build time. On the right side, we have all time. On the right side, we have all time. On the right side, we have all work that is already on the reactive work that is already on the reactive work that is already on the reactive side that is related to the already side that is related to the already side that is related to the already released content. So, how we can work released content. So, how we can work released content. So, how we can work together? On the left side, we have a together? On the left side, we have a together? On the left side, we have a build. We scan it. We detected a CVE. build. We scan it. We detected a CVE. build. We scan it. We detected a CVE. And um in this example, I would like to And um in this example, I would like to And um in this example, I would like to show two use show two use show two use cases. Let's imagine that this build is cases. Let's imagine that this build is cases. Let's imagine that this build is a new build. It wasn't released yet a new build. It wasn't released yet a new build. It wasn't released yet before. It's a completely new component before. It's a completely new component before. It's a completely new component that that will bring a new feature in that that will bring a new feature in that that will bring a new feature in our product. It wasn't released before. our product. It wasn't released before. our product. It wasn't released before. In this case, if we detect a CVE, it In this case, if we detect a CVE, it In this case, if we detect a CVE, it means that someone use means that someone use means that someone use uh affected library package, right? It's uh affected library package, right? It's uh affected library package, right? It's not published yet on for example Red Hat not published yet on for example Red Hat not published yet on for example Red Hat CV pages because it's again new build. CV pages because it's again new build. CV pages because it's again new build. It wasn't released before. In this case, It wasn't released before. In this case, It wasn't released before. In this case, we have two options. We know that there we have two options. We know that there we have two options. We know that there is something so we can block such is something so we can block such is something so we can block such build. Do not allow it to release to build. Do not allow it to release to build. Do not allow it to release to production. production. production. We can tell the owner, hey, you have to We can tell the owner, hey, you have to We can tell the owner, hey, you have to fix fix fix it. New build will be created. It'll be it. New build will be created. It'll be it. New build will be created. It'll be scanned. Everything is green. Now you scanned. Everything is green. Now you scanned. Everything is green. Now you can release it and we don't need to do can release it and we don't need to do can release it and we don't need to do any updates on our public data. But any updates on our public data. But any updates on our public data. But there's another possible use case where there's another possible use case where there's another possible use case where the build that we just scanned, it's the build that we just scanned, it's the build that we just scanned, it's nothing new. It's just a new version, an nothing new. It's just a new version, an nothing new. It's just a new version, an update to the previous build that was update to the previous build that was update to the previous build that was already released. It's already used by already released. It's already used by already released. It's already used by many customers. We scan that build, we many customers. We scan that build, we many customers. We scan that build, we see vulnerability, we see the detected see vulnerability, we see the detected see vulnerability, we see the detected CVE and we can compare that result to CVE and we can compare that result to CVE and we can compare that result to the to our public data. If we see the to our public data. If we see the to our public data. If we see discrepancy between what we found during discrepancy between what we found during discrepancy between what we found during the build time and what is publicly the build time and what is publicly the build time and what is publicly available on ROCV data, I'm thinking available on ROCV data, I'm thinking available on ROCV data, I'm thinking about Redcat uh vulnerability about Redcat uh vulnerability about Redcat uh vulnerability database. Then we can react accordingly database. Then we can react accordingly database. Then we can react accordingly to this fact. We can correct our data to to this fact. We can correct our data to to this fact. We can correct our data to make sure that everyone knows what is make sure that everyone knows what is make sure that everyone knows what is going on in this particular component. going on in this particular component. going on in this particular component. Still we can block this build. We can Still we can block this build. We can Still we can block this build. We can tell owner you have to fix it and then tell owner you have to fix it and then tell owner you have to fix it and then release such update as a security update release such update as a security update release such update as a security update to this particular component that will to this particular component that will to this particular component that will improve significantly our public data. improve significantly our public data. improve significantly our public data. That's one of the use case how we can That's one of the use case how we can That's one of the use case how we can you know execute proactive and reactive you know execute proactive and reactive you know execute proactive and reactive vulnerability management vulnerability management vulnerability management together. Another example is related to security activities like I mentioned to security activities like I mentioned to security activities like I mentioned earlier but in this case SAS scanning I hope that everyone are aware scanning I hope that everyone are aware scanning I hope that everyone are aware that SAS scanning results contain a lot that SAS scanning results contain a lot that SAS scanning results contain a lot of false positives. of false positives. of false positives. uh trying to process all those scan uh trying to process all those scan uh trying to process all those scan results it's very time consuming and not results it's very time consuming and not results it's very time consuming and not efficient. At the beginning of this efficient. At the beginning of this efficient. At the beginning of this year, um, at Red Hat, we did a PC where year, um, at Red Hat, we did a PC where year, um, at Red Hat, we did a PC where we combine SAS scanning we combine SAS scanning we combine SAS scanning results together with CVE data from the results together with CVE data from the results together with CVE data from the CV CV CV records and we try to find a pattern for records and we try to find a pattern for records and we try to find a pattern for exactly the same component and the same exactly the same component and the same exactly the same component and the same uh from from one one grand product uh from from one one grand product uh from from one one grand product pattern between SAS scanning and what pattern between SAS scanning and what pattern between SAS scanning and what was already reported over the last year was already reported over the last year was already reported over the last year or years of the CD records. or years of the CD records. or years of the CD records. CV data and we found pretty interesting CV data and we found pretty interesting CV data and we found pretty interesting patterns uh that will improve and will patterns uh that will improve and will patterns uh that will improve and will help our engineering teams to focus on help our engineering teams to focus on help our engineering teams to focus on the right weaknesses because it means the right weaknesses because it means the right weaknesses because it means that something is wrong. If we found that something is wrong. If we found that something is wrong. If we found problems in our scans results and we problems in our scans results and we problems in our scans results and we repeat a same type of vulnerabilities repeat a same type of vulnerabilities repeat a same type of vulnerabilities again and again in this particular again and again in this particular again and again in this particular component that will reduce number of component that will reduce number of component that will reduce number of reported CVS uh against red portfolio reported CVS uh against red portfolio reported CVS uh against red portfolio and of course at the end will improve and of course at the end will improve and of course at the end will improve the customer the customer the customer experience. Let's take a look how it experience. Let's take a look how it experience. Let's take a look how it looks like on the diagram. In this case, looks like on the diagram. In this case, looks like on the diagram. In this case, I divided this uh diagram on on on two I divided this uh diagram on on on two I divided this uh diagram on on on two by by two and when on top is what was by by two and when on top is what was by by two and when on top is what was already released. This is that reactive already released. This is that reactive already released. This is that reactive work and data that we have publicly work and data that we have publicly work and data that we have publicly available. On the bottom is a build time available. On the bottom is a build time available. On the bottom is a build time all tests that are executed as a part as all tests that are executed as a part as all tests that are executed as a part as a part of the build process. combining a part of the build process. combining a part of the build process. combining them together of course requires uh data them together of course requires uh data them together of course requires uh data standardization because SAS redules and standardization because SAS redules and standardization because SAS redules and that we have as a uh part of our CV that we have as a uh part of our CV that we have as a uh part of our CV records it's not exactly the same. So we records it's not exactly the same. So we records it's not exactly the same. So we need to first do a data standardization need to first do a data standardization need to first do a data standardization and then uh we can use AI based analysis and then uh we can use AI based analysis and then uh we can use AI based analysis to find the most typical patterns and to find the most typical patterns and to find the most typical patterns and that will give us more precise uh that will give us more precise uh that will give us more precise uh weakness identification categories of weakness identification categories of weakness identification categories of weak weaknesses and will help prioritize weak weaknesses and will help prioritize weak weaknesses and will help prioritize the specific work and remediation that the specific work and remediation that the specific work and remediation that could be also an input for more targeted could be also an input for more targeted could be also an input for more targeted uh thread modeling. I have a real uh thread modeling. I have a real uh thread modeling. I have a real example based on the analysis that was example based on the analysis that was example based on the analysis that was done. On the left side is a done. On the left side is a done. On the left side is a sorted SAS results for one single sorted SAS results for one single sorted SAS results for one single component in one product. On the right component in one product. On the right component in one product. On the right side side side is analysis of the CVS for exactly the is analysis of the CVS for exactly the is analysis of the CVS for exactly the same component and the same product. And same component and the same product. And same component and the same product. And you you can see after the data you you can see after the data you you can see after the data standardization that there are some standardization that there are some standardization that there are some patterns. We see that for example there patterns. We see that for example there patterns. We see that for example there are problems related to authorization are problems related to authorization are problems related to authorization errors uh witness category. So here we errors uh witness category. So here we errors uh witness category. So here we see that in this case our engineering see that in this case our engineering see that in this case our engineering team owner of this component where we team owner of this component where we team owner of this component where we found this pattern those patterns should found this pattern those patterns should found this pattern those patterns should prioritize those three detected things prioritize those three detected things prioritize those three detected things first because it's something that is first because it's something that is first because it's something that is repeating again and repeating again and repeating again and again. So let's address those problems again. So let's address those problems again. So let's address those problems to avoid new CVE related to exactly the to avoid new CVE related to exactly the to avoid new CVE related to exactly the same problems again in the future. same problems again in the future. same problems again in the future. So we just discussed two So we just discussed two So we just discussed two possible use cases for proactive and possible use cases for proactive and possible use cases for proactive and reactive vulnerability management that reactive vulnerability management that reactive vulnerability management that can work can work can work together. I was pretty fast. Now we have together. I was pretty fast. Now we have together. I was pretty fast. Now we have time for questions. I thank you for the presentation. Quick I thank you for the presentation. Quick I thank you for the presentation. Quick question. Isn't that a self pro uh a question. Isn't that a self pro uh a question. Isn't that a self pro uh a self-prophecy? Can you speak a little self-prophecy? Can you speak a little self-prophecy? Can you speak a little louder? I'm I'm not sure if this louder? I'm I'm not sure if this louder? I'm I'm not sure if this enabled. enabled. enabled. Um, isn't that a self prophecy? If we Um, isn't that a self prophecy? If we Um, isn't that a self prophecy? If we fix only those things that have been fix only those things that have been fix only those things that have been fixed in the past on the kind of fixed in the past on the kind of fixed in the past on the kind of vulnerability class, aren't we missing vulnerability class, aren't we missing vulnerability class, aren't we missing out on those things that uh the product out on those things that uh the product out on those things that uh the product is vulnerable for, but those things is vulnerable for, but those things is vulnerable for, but those things haven't be fixed in the past? So, if you haven't be fixed in the past? So, if you haven't be fixed in the past? So, if you go back one slide go back one slide go back one slide and you say, "Hey, I have I've fixed and you say, "Hey, I have I've fixed and you say, "Hey, I have I've fixed that that that Uh, Uh, Uh, CWE, what is this? 283 or so. 284. 284. CWE, what is this? 283 or so. 284. 284. CWE, what is this? 283 or so. 284. 284. Okay, close enough. Um, I I fixed that Okay, close enough. Um, I I fixed that Okay, close enough. Um, I I fixed that the last couple times. I had five CVE the last couple times. I had five CVE the last couple times. I had five CVE for that or what whatsoever. Um, but for that or what whatsoever. Um, but for that or what whatsoever. Um, but there would have been another CWE that there would have been another CWE that there would have been another CWE that comes up in the SAS every time. I've comes up in the SAS every time. I've comes up in the SAS every time. I've never fixed that before. I never start never fixed that before. I never start never fixed that before. I never start fixing that just because I'm always fixing that just because I'm always fixing that just because I'm always prioritizing other prioritizing other prioritizing other things. And so I'm I'm trying to things. And so I'm I'm trying to things. And so I'm I'm trying to eradicate maybe an irrelevant class of eradicate maybe an irrelevant class of eradicate maybe an irrelevant class of errors that is not as important in my in errors that is not as important in my in errors that is not as important in my in my vulnerability, but I used to fix my vulnerability, but I used to fix my vulnerability, but I used to fix those with a a lot of effort. And I those with a a lot of effort. And I those with a a lot of effort. And I could actually have better coverage or could actually have better coverage or could actually have better coverage or some others if uh or fix more some others if uh or fix more some others if uh or fix more vulnerabilities easier if I just looked vulnerabilities easier if I just looked vulnerabilities easier if I just looked at disaster tests and and looked at the at disaster tests and and looked at the at disaster tests and and looked at the severity of the vulnerability. severity of the vulnerability. severity of the vulnerability. Very good question. Uh so it means Very good question. Uh so it means Very good question. Uh so it means that let let me double check that I that let let me double check that I that let let me double check that I understand where you're what you're understand where you're what you're understand where you're what you're asking asking asking for. It means that if I see in the SAS for. It means that if I see in the SAS for. It means that if I see in the SAS results repeating weakness category but results repeating weakness category but results repeating weakness category but there was no CVS related to that there was no CVS related to that there was no CVS related to that category in the category in the category in the past and you you're asking if I should past and you you're asking if I should past and you you're asking if I should ignore it. ignore it. ignore it. It's not um that I ask whether you It's not um that I ask whether you It's not um that I ask whether you should ignore it. It's more the question should ignore it. It's more the question should ignore it. It's more the question whether you do ignore it whether you do ignore it whether you do ignore it and you know if if you prioritize other and you know if if you prioritize other and you know if if you prioritize other things over that thing that repeats things over that thing that repeats things over that thing that repeats um then or maybe you have you have two um then or maybe you have you have two um then or maybe you have you have two two different classes. One is always and two different classes. One is always and two different classes. One is always and and they have the same amount and you and they have the same amount and you and they have the same amount and you have the one class say the 284 that you have the one class say the 284 that you have the one class say the 284 that you always fix and there's the other one always fix and there's the other one always fix and there's the other one just pick a random number. I don't I just pick a random number. I don't I just pick a random number. I don't I don't care. Um that has the same amount don't care. Um that has the same amount don't care. Um that has the same amount of of findings in a ZAS, but you have of of findings in a ZAS, but you have of of findings in a ZAS, but you have never fixed that before. Mhm. So the never fixed that before. Mhm. So the never fixed that before. Mhm. So the question is if I prioritize the 28 for question is if I prioritize the 28 for question is if I prioritize the 28 for each and every time since I fixed those each and every time since I fixed those each and every time since I fixed those before and I never get to the point before and I never get to the point before and I never get to the point where I fix the other one, then it's where I fix the other one, then it's where I fix the other one, then it's more or less a self-fulfilling prophecy more or less a self-fulfilling prophecy more or less a self-fulfilling prophecy that I have that many 284s in my code. that I have that many 284s in my code. that I have that many 284s in my code. since I always prioritize them. So that since I always prioritize them. So that since I always prioritize them. So that I'm presenting here is one of uh ideas I'm presenting here is one of uh ideas I'm presenting here is one of uh ideas how we should uh better prioritize uh how we should uh better prioritize uh how we should uh better prioritize uh weakness remediation in our products weakness remediation in our products weakness remediation in our products only because I fix one CV related to or only because I fix one CV related to or only because I fix one CV related to or some many CVs last year two years ago some many CVs last year two years ago some many CVs last year two years ago whatever related to this type of um whatever related to this type of um whatever related to this type of um weakness class it doesn't mean that I weakness class it doesn't mean that I weakness class it doesn't mean that I really remediate the problem because we really remediate the problem because we really remediate the problem because we see today that there are so many see today that there are so many see today that there are so many vulnerabilities reported every single vulnerabilities reported every single vulnerabilities reported every single say that many times owners of the say that many times owners of the say that many times owners of the product instead of trying to find what product instead of trying to find what product instead of trying to find what is the problem real problem what is the is the problem real problem what is the is the problem real problem what is the root cause they just want to okay let's root cause they just want to okay let's root cause they just want to okay let's just fix it let's just fix it let's just fix it let's just change one package replace it and just change one package replace it and just change one package replace it and done let's release it and done many done let's release it and done many done let's release it and done many times it's not a real root cause times it's not a real root cause times it's not a real root cause analysis and problem elimination is just analysis and problem elimination is just analysis and problem elimination is just okay let's just fix it move on because I okay let's just fix it move on because I okay let's just fix it move on because I have so many task to do release new have so many task to do release new have so many task to do release new features and the real problem is not features and the real problem is not features and the real problem is not addressed. That's what I'm trying to addressed. That's what I'm trying to addressed. That's what I'm trying to show to show here here that okay we see show to show here here that okay we see show to show here here that okay we see that problems and patterns. So let's that problems and patterns. So let's that problems and patterns. So let's just prioritize some of them because in just prioritize some of them because in just prioritize some of them because in SAS Red there are so many different you SAS Red there are so many different you SAS Red there are so many different you know things reported there are so many know things reported there are so many know things reported there are so many false positives that it is really false positives that it is really false positives that it is really difficult to do uh that to remediate difficult to do uh that to remediate difficult to do uh that to remediate everything as for example in this uh on everything as for example in this uh on everything as for example in this uh on the left side you see that SAS results the left side you see that SAS results the left side you see that SAS results and what was found that uh SAS scanner and what was found that uh SAS scanner and what was found that uh SAS scanner suggested me that I need to fix weakness suggested me that I need to fix weakness suggested me that I need to fix weakness 398 which is a category so what I'm 398 which is a category so what I'm 398 which is a category so what I'm supposed to supposed to supposed to So that's only one of the examples how So that's only one of the examples how So that's only one of the examples how we should persize the work not repeating we should persize the work not repeating we should persize the work not repeating only the okay let's just fix the the only the okay let's just fix the the only the okay let's just fix the the what was reported as a vulnerability what was reported as a vulnerability what was reported as a vulnerability done and next one next one that's one of done and next one next one that's one of done and next one next one that's one of the possible approaches but I agree if the possible approaches but I agree if the possible approaches but I agree if something is repeating again and again something is repeating again and again something is repeating again and again in SAS results if I address the top in SAS results if I address the top in SAS results if I address the top priority I can get back and find another priority I can get back and find another priority I can get back and find another patterns what is repeating again then patterns what is repeating again then patterns what is repeating again then that's another prioritization that's another prioritization that's another prioritization app. Very good app. Very good app. Very good question. Thank question. Thank question. Thank you. Uh we don't have remote uh you. Uh we don't have remote uh you. Uh we don't have remote uh microphone so I'm sorry you have to go microphone so I'm sorry you have to go microphone so I'm sorry you have to go there. So this is very interesting slide and So this is very interesting slide and So this is very interesting slide and I'm curious if you had a chance also to I'm curious if you had a chance also to I'm curious if you had a chance also to look at other uh I would say metrics look at other uh I would say metrics look at other uh I would say metrics except the except the except the C CV severity like what is actually C CV severity like what is actually C CV severity like what is actually exploitable. So it has like exploit exploitable. So it has like exploit exploitable. So it has like exploit existing in metasloit in exploit DB or existing in metasloit in exploit DB or existing in metasloit in exploit DB or maybe even like EPSS score levels and maybe even like EPSS score levels and maybe even like EPSS score levels and may maybe this can bring more you know I may maybe this can bring more you know I may maybe this can bring more you know I would say more aspect of prioritization would say more aspect of prioritization would say more aspect of prioritization than just relying on the CBSS severity than just relying on the CBSS severity than just relying on the CBSS severity level. Perfect question. Thank you. uh level. Perfect question. Thank you. uh level. Perfect question. Thank you. uh right now as a part of this uh PC we right now as a part of this uh PC we right now as a part of this uh PC we just focused to find out if we can find just focused to find out if we can find just focused to find out if we can find some kind of some kind of some kind of patterns based on that work we find okay patterns based on that work we find okay patterns based on that work we find okay now we would just try to implement it now we would just try to implement it now we would just try to implement it and definitely we need to add more and definitely we need to add more and definitely we need to add more metrics not only severity but also EPSS metrics not only severity but also EPSS metrics not only severity but also EPSS scoring and and so on to find out how we scoring and and so on to find out how we scoring and and so on to find out how we can improve this priorization model of can improve this priorization model of can improve this priorization model of course so you you are planning to do it course so you you are planning to do it course so you you are planning to do it or you have done it I'm I'm just curious or you have done it I'm I'm just curious or you have done it I'm I'm just curious to to the results that What I'm to to the results that What I'm to to the results that What I'm presenting right now is a result of PC. presenting right now is a result of PC. presenting right now is a result of PC. It's not implemented in production. We It's not implemented in production. We It's not implemented in production. We don't use it today yet. don't use it today yet. don't use it today yet. Thank you. Hi. So uh I'm wondering have you looked Hi. So uh I'm wondering have you looked Hi. So uh I'm wondering have you looked at the the CWE at the the CWE at the the CWE distribution in the CVE system because I distribution in the CVE system because I distribution in the CVE system because I have a gut feeling that uh most of the have a gut feeling that uh most of the have a gut feeling that uh most of the there are a lot of CV CWES will be there are a lot of CV CWES will be there are a lot of CV CWES will be repeating because I don't believe the C repeating because I don't believe the C repeating because I don't believe the C every CVE has a complete list of every CVE has a complete list of every CVE has a complete list of relevant CWE CWE is is not set up in a relevant CWE CWE is is not set up in a relevant CWE CWE is is not set up in a way that they're mutually exclusive so way that they're mutually exclusive so way that they're mutually exclusive so that sometimes maybe multiple weaknesses that sometimes maybe multiple weaknesses that sometimes maybe multiple weaknesses are involved but they're not all listed are involved but they're not all listed are involved but they're not all listed in C CVE. So I actually don't know how in C CVE. So I actually don't know how in C CVE. So I actually don't know how CVE determines which CWE should be CVE determines which CWE should be CVE determines which CWE should be included in this case. So I that's why I included in this case. So I that's why I included in this case. So I that's why I feel if you run a distribution it might feel if you run a distribution it might feel if you run a distribution it might be that all the across CW if you all be that all the across CW if you all be that all the across CW if you all these 10 C C for all the CWs maybe these these 10 C C for all the CWs maybe these these 10 C C for all the CWs maybe these 10 C CWEs always show up. It's like uh 10 C CWEs always show up. It's like uh 10 C CWEs always show up. It's like uh 90%. Good question. It's also related to the Good question. It's also related to the Good question. It's also related to the uh CWE root cause mapping working group uh CWE root cause mapping working group uh CWE root cause mapping working group where we have a strong push to make sure where we have a strong push to make sure where we have a strong push to make sure that always the CNA who assign to to to that always the CNA who assign to to to that always the CNA who assign to to to to report a CV to assign a CV ID record to report a CV to assign a CV ID record to report a CV to assign a CV ID record provides a very precise information provides a very precise information provides a very precise information about the associated root cause in this about the associated root cause in this about the associated root cause in this case weakness that leads to this case weakness that leads to this case weakness that leads to this vulnerability. That's the very important vulnerability. That's the very important vulnerability. That's the very important first step that you need to have a good first step that you need to have a good first step that you need to have a good metrics, good data in the on the CV metrics, good data in the on the CV metrics, good data in the on the CV side, information about weaknesses that side, information about weaknesses that side, information about weaknesses that lead to those vulnerabilities to do this lead to those vulnerabilities to do this lead to those vulnerabilities to do this type of analysis. So here in this PLC, I type of analysis. So here in this PLC, I type of analysis. So here in this PLC, I clean um CV records data, Red Hat CVU clean um CV records data, Red Hat CVU clean um CV records data, Red Hat CVU records data for the last year 2024 to records data for the last year 2024 to records data for the last year 2024 to do this type of analysis. Uh you you ask also about the CWE chains Uh you you ask also about the CWE chains Uh you you ask also about the CWE chains right that's the question that there right that's the question that there right that's the question that there more than one CV is still CWE right more than one CV is still CWE right more than one CV is still CWE right yeah so in this ca in this case uh yeah so in this ca in this case uh yeah so in this ca in this case uh anyways our data standardization is to anyways our data standardization is to anyways our data standardization is to make sure that we are not focusing only make sure that we are not focusing only make sure that we are not focusing only one on one single CWE ID we are focused one on one single CWE ID we are focused one on one single CWE ID we are focused on the CWE category okay like said cate on the CWE category okay like said cate on the CWE category okay like said cate weakness class it's not only one single weakness class it's not only one single weakness class it's not only one single CW ID because if you want to do this CW ID because if you want to do this CW ID because if you want to do this type of analysis on the very single type of analysis on the very single type of analysis on the very single every single weakness ID it will be every single weakness ID it will be every single weakness ID it will be really very difficult because over the really very difficult because over the really very difficult because over the time for example there could be time for example there could be time for example there could be situation that you fix 10 CVE related to situation that you fix 10 CVE related to situation that you fix 10 CVE related to a little bit different weaknesses right a little bit different weaknesses right a little bit different weaknesses right but all of those weaknesses are from the but all of those weaknesses are from the but all of those weaknesses are from the same class like memory errors or same class like memory errors or same class like memory errors or something like that or data something like that or data something like that or data validation then it means that you have validation then it means that you have validation then it means that you have something wrong in your code in your something wrong in your code in your something wrong in your code in your application in this area. All of those application in this area. All of those application in this area. All of those 10 CDs were related to the different 10 CDs were related to the different 10 CDs were related to the different particular single weaknesses but in particular single weaknesses but in particular single weaknesses but in total all 10 were related to one of the total all 10 were related to one of the total all 10 were related to one of the same weakness class. Okay. Does that same weakness class. Okay. Does that same weakness class. Okay. Does that make sense? Yeah. Thank you.