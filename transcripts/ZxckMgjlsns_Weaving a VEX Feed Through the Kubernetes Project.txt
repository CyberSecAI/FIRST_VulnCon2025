Kind: captions Language: en All right. Um, so welcome everyone. My All right. Um, so welcome everyone. My All right. Um, so welcome everyone. My name is Alo Garcia and usually I go by name is Alo Garcia and usually I go by name is Alo Garcia and usually I go by Puco. Um, I am a software engineer and a Puco. Um, I am a software engineer and a Puco. Um, I am a software engineer and a super small new startup called Carabiner super small new startup called Carabiner super small new startup called Carabiner Systems. But today I'm here because I'm Systems. But today I'm here because I'm Systems. But today I'm here because I'm also part of the release engineering also part of the release engineering also part of the release engineering team with Kubernetes. and I am also um team with Kubernetes. and I am also um team with Kubernetes. and I am also um one of the technical leads of the open one of the technical leads of the open one of the technical leads of the open vex project in the open source security vex project in the open source security vex project in the open source security foundation. So me being here on the foundation. So me being here on the foundation. So me being here on the stage is like wearing both hats uh which stage is like wearing both hats uh which stage is like wearing both hats uh which is I don't know kind of why uh we want is I don't know kind of why uh we want is I don't know kind of why uh we want to present the new tools. So this is I'm to present the new tools. So this is I'm to present the new tools. So this is I'm going to rush through the talk because going to rush through the talk because going to rush through the talk because it's like I only have half an hour. So it's like I only have half an hour. So it's like I only have half an hour. So the goals are this one. So this talk has the goals are this one. So this talk has the goals are this one. So this talk has a VEX introduction which I usually a VEX introduction which I usually a VEX introduction which I usually wouldn't do in this setting because wouldn't do in this setting because wouldn't do in this setting because we're all um familiar and experts on we're all um familiar and experts on we're all um familiar and experts on things like VEX. But uh something that things like VEX. But uh something that things like VEX. But uh something that became relevant last year at this very became relevant last year at this very became relevant last year at this very conference is that we have a lot of conference is that we have a lot of conference is that we have a lot of different points of view on how VEX different points of view on how VEX different points of view on how VEX works, how to consume them, the works, how to consume them, the works, how to consume them, the experiences. So you're going to see that experiences. So you're going to see that experiences. So you're going to see that the experience for our VEX work is the experience for our VEX work is the experience for our VEX work is completely different to what was just completely different to what was just completely different to what was just presented. presented. presented. um in the maturity levels of different um in the maturity levels of different um in the maturity levels of different aspects are different. So uh probably aspects are different. So uh probably aspects are different. So uh probably I'll just rush to that. Um and then I'll just rush to that. Um and then I'll just rush to that. Um and then we're going to talk about what the we're going to talk about what the we're going to talk about what the difficulties are on assembling VEX or difficulties are on assembling VEX or difficulties are on assembling VEX or Kubernetes such a large project with Kubernetes such a large project with Kubernetes such a large project with many different stakeholders. many different stakeholders. many different stakeholders. uh a few tools that we developed um that uh a few tools that we developed um that uh a few tools that we developed um that uh enabled us to do the vex feeds and um uh enabled us to do the vex feeds and um uh enabled us to do the vex feeds and um so I have a demo but since I cannot have so I have a demo but since I cannot have so I have a demo but since I cannot have microns here I put together like a microns here I put together like a microns here I put together like a children's story book with screenshots children's story book with screenshots children's story book with screenshots so that we can see it in action. All so that we can see it in action. All so that we can see it in action. All right so let's go through it. So what is right so let's go through it. So what is right so let's go through it. So what is vex? Um so vex you know and it's a vex? Um so vex you know and it's a vex? Um so vex you know and it's a chronological system of documents where chronological system of documents where chronological system of documents where you issue impact assessments of you issue impact assessments of you issue impact assessments of vulnerabilities on your product. So is vulnerabilities on your product. So is vulnerabilities on your product. So is my product has a vulnerability? Does it my product has a vulnerability? Does it my product has a vulnerability? Does it affect me or not? And the evolution of affect me or not? And the evolution of affect me or not? And the evolution of that knowledge over time. So this is how that knowledge over time. So this is how that knowledge over time. So this is how we see vex uh working especially this is we see vex uh working especially this is we see vex uh working especially this is mostly the way we see vex working in mostly the way we see vex working in mostly the way we see vex working in open vex. So let's say that you have open vex. So let's say that you have open vex. So let's say that you have your product in our case it's not a big your product in our case it's not a big your product in our case it's not a big enterprise product it's an artifact. So enterprise product it's an artifact. So enterprise product it's an artifact. So think about a container image or a think about a container image or a think about a container image or a binary. So usually you would take your binary. So usually you would take your binary. So usually you would take your scanners point at them. they will find scanners point at them. they will find scanners point at them. they will find vulnerabilities and those vulnerabilities and those vulnerabilities and those vulnerabilities most of the time will vulnerabilities most of the time will vulnerabilities most of the time will come from dependencies in the case of come from dependencies in the case of come from dependencies in the case of container images. A lot of them come container images. A lot of them come container images. A lot of them come from the operating system dependencies from the operating system dependencies from the operating system dependencies installed in the image or the language installed in the image or the language installed in the image or the language dependencies of the application itself. dependencies of the application itself. dependencies of the application itself. Now with vex we produce a document that Now with vex we produce a document that Now with vex we produce a document that ties together the the product the ties together the the product the ties together the the product the component and that vulnerability and component and that vulnerability and component and that vulnerability and essentially issues um so you have that essentially issues um so you have that essentially issues um so you have that document and then when you point the document and then when you point the document and then when you point the scanners at your product again you feed scanners at your product again you feed scanners at your product again you feed that um that document to the scanners that um that document to the scanners that um that document to the scanners and they will still find a vulnerability and they will still find a vulnerability and they will still find a vulnerability but based on the assessment contained in but based on the assessment contained in but based on the assessment contained in the vex document they may choose to the vex document they may choose to the vex document they may choose to suppress that from the input. Basically suppress that from the input. Basically suppress that from the input. Basically the dream that they were just discussing the dream that they were just discussing the dream that they were just discussing in the previous talk in open vex is a in the previous talk in open vex is a in the previous talk in open vex is a reality. So both trivia and gripe reality. So both trivia and gripe reality. So both trivia and gripe already support natively uh ingest the already support natively uh ingest the already support natively uh ingest the injection of open vex documents. Um and injection of open vex documents. Um and injection of open vex documents. Um and not only um ingesting them but there are not only um ingesting them but there are not only um ingesting them but there are some uh discovery capabilities as well. some uh discovery capabilities as well. some uh discovery capabilities as well. So you can attach if you publish a So you can attach if you publish a So you can attach if you publish a container image we can attach the container image we can attach the container image we can attach the documents signed together with the documents signed together with the documents signed together with the container image and the scanner is able container image and the scanner is able container image and the scanner is able to retrieve them from the from the to retrieve them from the from the to retrieve them from the from the registry and automatically uh suppress registry and automatically uh suppress registry and automatically uh suppress the vulnerabilities um or show them to the vulnerabilities um or show them to the vulnerabilities um or show them to you depending on your configuration. Uh you depending on your configuration. Uh you depending on your configuration. Uh so as we said together bring together so as we said together bring together so as we said together bring together product vulnerability and the four uh product vulnerability and the four uh product vulnerability and the four uh the four uh status messages of VEX under the four uh status messages of VEX under the four uh status messages of VEX under investigation investigation investigation uh affected not affected and fixed. So uh affected not affected and fixed. So uh affected not affected and fixed. So this can uh so you can issue one uh VEX this can uh so you can issue one uh VEX this can uh so you can issue one uh VEX statement if you know the final statement if you know the final statement if you know the final assessment but also we also support the assessment but also we also support the assessment but also we also support the idea of okay this is a like evolution idea of okay this is a like evolution idea of okay this is a like evolution that changes there's an evolution of of that changes there's an evolution of of that changes there's an evolution of of knowledge that happens over time. So you knowledge that happens over time. So you knowledge that happens over time. So you want to make sure that you are able to want to make sure that you are able to want to make sure that you are able to push that and um why is so there are push that and um why is so there are push that and um why is so there are four flavors of vex today. So there's uh four flavors of vex today. So there's uh four flavors of vex today. So there's uh cesaf which is kind of the big brother cesaf which is kind of the big brother cesaf which is kind of the big brother of vex uh the common security advisory of vex uh the common security advisory of vex uh the common security advisory framework. There's a vex flavor in both framework. There's a vex flavor in both framework. There's a vex flavor in both som standards one in cyclone and one in som standards one in cyclone and one in som standards one in cyclone and one in spdx and of course the flavor that we're spdx and of course the flavor that we're spdx and of course the flavor that we're uh growing in the open sf openvex. Uh so uh growing in the open sf openvex. Uh so uh growing in the open sf openvex. Uh so open vex was designed from the beginning open vex was designed from the beginning open vex was designed from the beginning to be vex and only vex we don't support to be vex and only vex we don't support to be vex and only vex we don't support so it's designed to be super thin lean so it's designed to be super thin lean so it's designed to be super thin lean and it's linked data it's uh written in and it's linked data it's uh written in and it's linked data it's uh written in um uh um JSON LD and uh it is designed um uh um JSON LD and uh it is designed um uh um JSON LD and uh it is designed to be embedded in other supporting to be embedded in other supporting to be embedded in other supporting formats such as at the stations. formats such as at the stations. formats such as at the stations. uh this becomes especially important uh this becomes especially important uh this becomes especially important because uh when you have mandates like because uh when you have mandates like because uh when you have mandates like the CRA which is requiring the shipping the CRA which is requiring the shipping the CRA which is requiring the shipping of products without known of products without known of products without known vulnerabilities. Well, we think that vulnerabilities. Well, we think that vulnerabilities. Well, we think that there may be I mean this is still under there may be I mean this is still under there may be I mean this is still under discussion but we think that there is a discussion but we think that there is a discussion but we think that there is a future where uh you can provide a future where uh you can provide a future where uh you can provide a security scan and pair it together with security scan and pair it together with security scan and pair it together with uh a VEX document to to uh fulfill all uh a VEX document to to uh fulfill all uh a VEX document to to uh fulfill all of these um requirements. Uh so VEX has of these um requirements. Uh so VEX has of these um requirements. Uh so VEX has potential answers for some of these potential answers for some of these potential answers for some of these questions like um did you fix your questions like um did you fix your questions like um did you fix your vulnerabilities already? Do you uh do vulnerabilities already? Do you uh do vulnerabilities already? Do you uh do you want to communicate the impact they you want to communicate the impact they you want to communicate the impact they have on your product? And all that all have on your product? And all that all have on your product? And all that all of those uh questions. Uh we're going to of those uh questions. Uh we're going to of those uh questions. Uh we're going to see a demo on how you could potentially see a demo on how you could potentially see a demo on how you could potentially stop the release of a non-compliant stop the release of a non-compliant stop the release of a non-compliant artifact uh with nonvulnerabilities just artifact uh with nonvulnerabilities just artifact uh with nonvulnerabilities just as an example of the tooling that we've as an example of the tooling that we've as an example of the tooling that we've built. built. built. So uh going back to vexing Kubernetes. So uh going back to vexing Kubernetes. So uh going back to vexing Kubernetes. So the problem with vexing Kubernetes So the problem with vexing Kubernetes So the problem with vexing Kubernetes comes uh from many different angles. One comes uh from many different angles. One comes uh from many different angles. One is the generation of the information is the generation of the information is the generation of the information itself because there are open questions itself because there are open questions itself because there are open questions on every aspect. So for example, who can on every aspect. So for example, who can on every aspect. So for example, who can issue the VEX documents? If someone from issue the VEX documents? If someone from issue the VEX documents? If someone from the project is going to um issue an the project is going to um issue an the project is going to um issue an assessment if a vulnerability impacts assessment if a vulnerability impacts assessment if a vulnerability impacts the code or not, who has authority to do the code or not, who has authority to do the code or not, who has authority to do that? How do you check that the uh VEX that? How do you check that the uh VEX that? How do you check that the uh VEX statements that we release are actually statements that we release are actually statements that we release are actually um from the people that are supposed to um from the people that are supposed to um from the people that are supposed to own them? Uh who signs the artifacts? own them? Uh who signs the artifacts? own them? Uh who signs the artifacts? And then there's a question of okay, so And then there's a question of okay, so And then there's a question of okay, so this is open source. It's moving this is open source. It's moving this is open source. It's moving constantly. How do we keep track of constantly. How do we keep track of constantly. How do we keep track of everything? everything? everything? uh then there's uh other kinds of uh then there's uh other kinds of uh then there's uh other kinds of information that you need to mix in like information that you need to mix in like information that you need to mix in like to add to the mix like the our CVE feed to add to the mix like the our CVE feed to add to the mix like the our CVE feed kubernetes is a CV number numbering kubernetes is a CV number numbering kubernetes is a CV number numbering authority so the the um the our like our authority so the the um the our like our authority so the the um the our like our advisories how do we how do they play advisories how do we how do they play advisories how do we how do they play into the the the whole ve system that we into the the the whole ve system that we into the the the whole ve system that we are building um and then um there's of are building um and then um there's of are building um and then um there's of course the question of publishing so we course the question of publishing so we course the question of publishing so we can we can publish those documents along can we can publish those documents along can we can publish those documents along with the the built artifacts. But then with the the built artifacts. But then with the the built artifacts. But then there's a life cycle that comes to them there's a life cycle that comes to them there's a life cycle that comes to them like they could be changing and then like they could be changing and then like they could be changing and then they they are you should always consider they they are you should always consider they they are you should always consider them to be in constant function. So them to be in constant function. So them to be in constant function. So where do we put them once they're where do we put them once they're where do we put them once they're they're done? We don't have answers for they're done? We don't have answers for they're done? We don't have answers for 100% of all of these problems but uh I 100% of all of these problems but uh I 100% of all of these problems but uh I think we had some satisfactory answers think we had some satisfactory answers think we had some satisfactory answers for most of them. Um now this is uh so for most of them. Um now this is uh so for most of them. Um now this is uh so this since this is in like a problem this since this is in like a problem this since this is in like a problem encompassing all areas of the project uh encompassing all areas of the project uh encompassing all areas of the project uh because like you could have a because like you could have a because like you could have a vulnerability showing up in a go module vulnerability showing up in a go module vulnerability showing up in a go module in storage or in networking. So it needs in storage or in networking. So it needs in storage or in networking. So it needs like projectwide coordination. So the like projectwide coordination. So the like projectwide coordination. So the VEX effort currently is being VEX effort currently is being VEX effort currently is being coordinated with between Z release which coordinated with between Z release which coordinated with between Z release which is the group that I'm a part of. We is the group that I'm a part of. We is the group that I'm a part of. We build all of the supply chain security build all of the supply chain security build all of the supply chain security features of the Kubernetes release features of the Kubernetes release features of the Kubernetes release process and also seek security who care process and also seek security who care process and also seek security who care for the overall security of the project. for the overall security of the project. for the overall security of the project. Um and also the third secret partner Um and also the third secret partner Um and also the third secret partner here is a security response committee here is a security response committee here is a security response committee who issues the uh Kubernetes security who issues the uh Kubernetes security who issues the uh Kubernetes security advisories. So how do we advisories. So how do we advisories. So how do we um how do we uh how are we planning to um how do we uh how are we planning to um how do we uh how are we planning to do the uh the the Kubernetes vex feed. do the uh the the Kubernetes vex feed. do the uh the the Kubernetes vex feed. All right. So this is the dream the vex All right. So this is the dream the vex All right. So this is the dream the vex feed of kubernetes. So we were thinking feed of kubernetes. So we were thinking feed of kubernetes. So we were thinking so what would the ideal uh vex feed for so what would the ideal uh vex feed for so what would the ideal uh vex feed for the project would look like and so there the project would look like and so there the project would look like and so there are many sources for it and we are many sources for it and we are many sources for it and we identified three three kinds of uh of identified three three kinds of uh of identified three three kinds of uh of vex feeds that will all converge into vex feeds that will all converge into vex feeds that will all converge into this this final one. The first one is this this final one. The first one is this this final one. The first one is the like vexing the vulnerabilities in the like vexing the vulnerabilities in the like vexing the vulnerabilities in the Kubernetes components that is the Kubernetes components that is the Kubernetes components that is information from the CVS that scanners information from the CVS that scanners information from the CVS that scanners are picking up in the dependencies in are picking up in the dependencies in are picking up in the dependencies in the go dependencies of the project. Now the go dependencies of the project. Now the go dependencies of the project. Now this one is is number one but in reality this one is is number one but in reality this one is is number one but in reality it is composed of two feeds. The first it is composed of two feeds. The first it is composed of two feeds. The first one is the go v check uh automat one is the go v check uh automat one is the go v check uh automat automatic uh detected non-impact automatic uh detected non-impact automatic uh detected non-impact vulnerabilities. So we are starting to vulnerabilities. So we are starting to vulnerabilities. So we are starting to run go vol which is um a tool from uh run go vol which is um a tool from uh run go vol which is um a tool from uh the go uh tool chain that analyzes the the go uh tool chain that analyzes the the go uh tool chain that analyzes the reachability of vulnerabilities. So go v reachability of vulnerabilities. So go v reachability of vulnerabilities. So go v using the compiler the go compiler can using the compiler the go compiler can using the compiler the go compiler can tell you if a certain vulnerability tell you if a certain vulnerability tell you if a certain vulnerability actually in in your components is actually in in your components is actually in in your components is actually triggered by the code. That's actually triggered by the code. That's actually triggered by the code. That's the first one. the first one. the first one. And the other is just experience from And the other is just experience from And the other is just experience from the maintainer. So if there is a the maintainer. So if there is a the maintainer. So if there is a vulnerability that the maintainers are vulnerability that the maintainers are vulnerability that the maintainers are sure that they don't affect the project, sure that they don't affect the project, sure that they don't affect the project, they we want them to uh make sure we we they we want them to uh make sure we we they we want them to uh make sure we we want to make sure that they can issue want to make sure that they can issue want to make sure that they can issue their assessments as well. Uh the second their assessments as well. Uh the second their assessments as well. Uh the second uh the second feed uh so that's go check uh the second feed uh so that's go check uh the second feed uh so that's go check the maintainers and the second feed is the maintainers and the second feed is the maintainers and the second feed is the um vex from the kubernetes security the um vex from the kubernetes security the um vex from the kubernetes security advisories. So when you think about it, advisories. So when you think about it, advisories. So when you think about it, um the advisories are like a negative um the advisories are like a negative um the advisories are like a negative VEX because it's like basically we want VEX because it's like basically we want VEX because it's like basically we want to complete the VEX picture by telling to complete the VEX picture by telling to complete the VEX picture by telling you okay so we release advisories you okay so we release advisories you okay so we release advisories telling you there's a vulnerability in telling you there's a vulnerability in telling you there's a vulnerability in the the the um let's say cube proxy image for um let's say cube proxy image for um let's say cube proxy image for Windows AMD 64 that means we can issue a Windows AMD 64 that means we can issue a Windows AMD 64 that means we can issue a VEX for that telling that telling you VEX for that telling that telling you VEX for that telling that telling you that that component is affected but we that that component is affected but we that that component is affected but we from that from the advisory data derive from that from the advisory data derive from that from the advisory data derive the other all of the other artifacts the other all of the other artifacts the other all of the other artifacts telling you that you are not affected if telling you that you are not affected if telling you that you are not affected if you're using those. I don't know if that you're using those. I don't know if that you're using those. I don't know if that makes any sense or not or not. The makes any sense or not or not. The makes any sense or not or not. The advisory tells you okay you're affected advisory tells you okay you're affected advisory tells you okay you're affected in this tree but the other 50 artifacts in this tree but the other 50 artifacts in this tree but the other 50 artifacts are not affected. Basically that's are not affected. Basically that's are not affected. Basically that's that's it. And then so to do that we are that's it. And then so to do that we are that's it. And then so to do that we are starting to rewrite our uh the the code starting to rewrite our uh the the code starting to rewrite our uh the the code that issues the advisories. So we want that issues the advisories. So we want that issues the advisories. So we want to move the generation of of the to move the generation of of the to move the generation of of the advisory data earlier and start with the advisory data earlier and start with the advisory data earlier and start with the OSV format, the open source OSV format, the open source OSV format, the open source vulnerabilities uh uh format and then vulnerabilities uh uh format and then vulnerabilities uh uh format and then from that one we can derive all of the from that one we can derive all of the from that one we can derive all of the other um vulnerability data that we need other um vulnerability data that we need other um vulnerability data that we need like the so the we from that we generate like the so the we from that we generate like the so the we from that we generate the um the advisories, the feed, we the um the advisories, the feed, we the um the advisories, the feed, we generate the the JSON that we ship to generate the the JSON that we ship to generate the the JSON that we ship to the CV um to the CV database and then we the CV um to the CV database and then we the CV um to the CV database and then we also capture that to generate the also capture that to generate the also capture that to generate the release notes and tell you what's release notes and tell you what's release notes and tell you what's affected and then also from the the OSV affected and then also from the the OSV affected and then also from the the OSV feed we can generate the vexes and the feed we can generate the vexes and the feed we can generate the vexes and the final one uh and we won't go into detail final one uh and we won't go into detail final one uh and we won't go into detail because there's a lot of open questions because there's a lot of open questions because there's a lot of open questions still on this one is the um still on this one is the um still on this one is the um vulnerabilities found in the base images vulnerabilities found in the base images vulnerabilities found in the base images of Kubernetes. So, Kubernetes builds and of Kubernetes. So, Kubernetes builds and of Kubernetes. So, Kubernetes builds and releases images that are pulled um releases images that are pulled um releases images that are pulled um thousands maybe millions of times every thousands maybe millions of times every thousands maybe millions of times every month. Uh and those images uh are month. Uh and those images uh are month. Uh and those images uh are static. They once we build them they are static. They once we build them they are static. They once we build them they are never upgraded. So, we need to also never upgraded. So, we need to also never upgraded. So, we need to also address the vulnerabilities found address the vulnerabilities found address the vulnerabilities found there. Um and then so once we have the there. Um and then so once we have the there. Um and then so once we have the um the Kubernetes vex feed there's a um the Kubernetes vex feed there's a um the Kubernetes vex feed there's a question of what do we do with them? So question of what do we do with them? So question of what do we do with them? So we take all of that vex data and then we take all of that vex data and then we take all of that vex data and then the the the current immediate plan is to the the the current immediate plan is to the the the current immediate plan is to start pushing the vex statements start pushing the vex statements start pushing the vex statements attached to the images in the registry. attached to the images in the registry. attached to the images in the registry. So that's the first one. Then we're So that's the first one. Then we're So that's the first one. Then we're thinking about building a stream a vex thinking about building a stream a vex thinking about building a stream a vex feed basically the stream of all of the feed basically the stream of all of the feed basically the stream of all of the statements that we release all of them statements that we release all of them statements that we release all of them just in a single uh line and then we can just in a single uh line and then we can just in a single uh line and then we can also collaborate with that data and also collaborate with that data and also collaborate with that data and other efforts such as aqua vexhub which other efforts such as aqua vexhub which other efforts such as aqua vexhub which is a repository of open source uh vex is a repository of open source uh vex is a repository of open source uh vex information. So information. So information. So um to uh so we right now are at the um to uh so we right now are at the um to uh so we right now are at the point where we have implemented 1 a and point where we have implemented 1 a and point where we have implemented 1 a and 1 b and we're working on uh on number 1 b and we're working on uh on number 1 b and we're working on uh on number two uh which is rewriting all of the two uh which is rewriting all of the two uh which is rewriting all of the advisory generation from the beginning. advisory generation from the beginning. advisory generation from the beginning. Okay. And so how do we did it? So the Okay. And so how do we did it? So the Okay. And so how do we did it? So the first one go v is simply running. So go first one go v is simply running. So go first one go v is simply running. So go v check the the uh the native go uh tool v check the the uh the native go uh tool v check the the uh the native go uh tool can issue openvex natively. So you just can issue openvex natively. So you just can issue openvex natively. So you just pass it instead of like pass the format pass it instead of like pass the format pass it instead of like pass the format openvex and it will spit out that openvex and it will spit out that openvex and it will spit out that information in open vex form. So the information in open vex form. So the information in open vex form. So the we've been working on 1B which is how do we've been working on 1B which is how do we've been working on 1B which is how do we capture the assessment for we capture the assessment for we capture the assessment for maintainers and um so I have to uh give maintainers and um so I have to uh give maintainers and um so I have to uh give credit where credit is due. So there are credit where credit is due. So there are credit where credit is due. So there are some folks here that uh showed very cool some folks here that uh showed very cool some folks here that uh showed very cool demos last year uh that really inspired demos last year uh that really inspired demos last year uh that really inspired us to think okay so how can engineers us to think okay so how can engineers us to think okay so how can engineers come and issue their opinions on the come and issue their opinions on the come and issue their opinions on the piece of software that they are uh in piece of software that they are uh in piece of software that they are uh in charge of so that we can generate the charge of so that we can generate the charge of so that we can generate the vex um so how does so we came up with vex um so how does so we came up with vex um so how does so we came up with this new uh vexflow tool um so how does this new uh vexflow tool um so how does this new uh vexflow tool um so how does it work this is at its core how it works it work this is at its core how it works it work this is at its core how it works so we let's say that you have your code so we let's say that you have your code so we let's say that you have your code uh your uh your uh your repository. Now, uh we start uh scanning repository. Now, uh we start uh scanning repository. Now, uh we start uh scanning periodically the branch like we run OSV periodically the branch like we run OSV periodically the branch like we run OSV scanner running running running running scanner running running running running scanner running running running running running and then uh so it's important to running and then uh so it's important to running and then uh so it's important to understand that Kubernetes always has understand that Kubernetes always has understand that Kubernetes always has three or four branches under maintenance three or four branches under maintenance three or four branches under maintenance which we need to vex constantly. So we which we need to vex constantly. So we which we need to vex constantly. So we scan each branch and whenever there is a scan each branch and whenever there is a scan each branch and whenever there is a vulnerability found uh Vexflow um takes vulnerability found uh Vexflow um takes vulnerability found uh Vexflow um takes the vulnerability and opens an issue on the vulnerability and opens an issue on the vulnerability and opens an issue on GitHub so that you can triage that GitHub so that you can triage that GitHub so that you can triage that vulnerability. By the way this is this vulnerability. By the way this is this vulnerability. By the way this is this tool is is most likely so we're having tool is is most likely so we're having tool is is most likely so we're having this discussions on whether we're going this discussions on whether we're going this discussions on whether we're going to host it in Kubernetes or in open vex to host it in Kubernetes or in open vex to host it in Kubernetes or in open vex but it's it's already open source and but it's it's already open source and but it's it's already open source and you can use it. Um so it opens this uh you can use it. Um so it opens this uh you can use it. Um so it opens this uh triage um issue. It has all of the triage um issue. It has all of the triage um issue. It has all of the information from the vulnerability and information from the vulnerability and information from the vulnerability and then then then um the next step is um the next step is um the next step is um so the first thing you can do is do um so the first thing you can do is do um so the first thing you can do is do nothing like okay it's a vulnerability nothing like okay it's a vulnerability nothing like okay it's a vulnerability and then you just leave it there and and then you just leave it there and and then you just leave it there and then after a while it'll autoc close the then after a while it'll autoc close the then after a while it'll autoc close the issue and you forget about it. But the issue and you forget about it. But the issue and you forget about it. But the other is when there's a vex statement to other is when there's a vex statement to other is when there's a vex statement to be issued uh one of the maintainers um be issued uh one of the maintainers um be issued uh one of the maintainers um can take a look at that and then based can take a look at that and then based can take a look at that and then based on their expertise they can do their on their expertise they can do their on their expertise they can do their assessment. How do we um know who can assessment. How do we um know who can assessment. How do we um know who can issue the vex issue the vex issue the vex statements? This tool uses if for those statements? This tool uses if for those statements? This tool uses if for those who are familiar, Kubernetes has the who are familiar, Kubernetes has the who are familiar, Kubernetes has the owners file which is a a way of creating owners file which is a a way of creating owners file which is a a way of creating a structure of um a structured uh a structure of um a structured uh a structure of um a structured uh permissions layer. So at the very top of permissions layer. So at the very top of permissions layer. So at the very top of a directory, you put an owners file and a directory, you put an owners file and a directory, you put an owners file and then you create a subdirectory which then you create a subdirectory which then you create a subdirectory which with other uh owners. So we have native with other uh owners. So we have native with other uh owners. So we have native support for that. So the idea is that if support for that. So the idea is that if support for that. So the idea is that if you are given permissions on some area you are given permissions on some area you are given permissions on some area of the code, you can come and issue your of the code, you can come and issue your of the code, you can come and issue your assessment. Um then the maintainer can assessment. Um then the maintainer can assessment. Um then the maintainer can issue their assessment. We see we'll see issue their assessment. We see we'll see issue their assessment. We see we'll see how in a little bit. And then once they how in a little bit. And then once they how in a little bit. And then once they generate the assessment, we generate the generate the assessment, we generate the generate the assessment, we generate the the open vex document, t it with six and the open vex document, t it with six and the open vex document, t it with six and then we publish it to the GitHub then we publish it to the GitHub then we publish it to the GitHub attestation store. uh since since we're attestation store. uh since since we're attestation store. uh since since we're generating this inside of GitHub uh generating this inside of GitHub uh generating this inside of GitHub uh actions we sign the vex push it out up actions we sign the vex push it out up actions we sign the vex push it out up there it can be stored anywhere uh there it can be stored anywhere uh there it can be stored anywhere uh really and then really and then really and then uh it so the issue closes in in there so uh it so the issue closes in in there so uh it so the issue closes in in there so after this process you end up with one after this process you end up with one after this process you end up with one attestation one vex document stored in attestation one vex document stored in attestation one vex document stored in there um some things to note is uh okay there um some things to note is uh okay there um some things to note is uh okay so let let's um let's do let I'm going so let let's um let's do let I'm going so let let's um let's do let I'm going to do the demo like like the story book to do the demo like like the story book to do the demo like like the story book demo to to show you how it works. So I demo to to show you how it works. So I demo to to show you how it works. So I built um this demo about a there's um a built um this demo about a there's um a built um this demo about a there's um a lab uh for this project that has a a lab uh for this project that has a a lab uh for this project that has a a project that is specially crafted. I I project that is specially crafted. I I project that is specially crafted. I I so by the way if anyone wants to see so by the way if anyone wants to see so by the way if anyone wants to see this live I can do it. Just look for me this live I can do it. Just look for me this live I can do it. Just look for me in the next couple of days and we can go in the next couple of days and we can go in the next couple of days and we can go over it. So we have a demo repo that has over it. So we have a demo repo that has over it. So we have a demo repo that has two vulnerabilities in it. Uh so it's two vulnerabilities in it. Uh so it's two vulnerabilities in it. Uh so it's specially crafted to to have those two. specially crafted to to have those two. specially crafted to to have those two. one uh it'll uh it the code never one uh it'll uh it the code never one uh it'll uh it the code never exploits it but it's still picked up by exploits it but it's still picked up by exploits it but it's still picked up by the scanner and the other is not the scanner and the other is not the scanner and the other is not exploitable and is picked up by bones go exploitable and is picked up by bones go exploitable and is picked up by bones go bone check uh so it it can issue the the bone check uh so it it can issue the the bone check uh so it it can issue the the vexes so this project um has a very vexes so this project um has a very vexes so this project um has a very simple release process you have a bunch simple release process you have a bunch simple release process you have a bunch of go files you compile them and release of go files you compile them and release of go files you compile them and release so the idea here um is that in order for so the idea here um is that in order for so the idea here um is that in order for example to make this um compliant with example to make this um compliant with example to make this um compliant with the CRA no nonvulner no exploitable the CRA no nonvulner no exploitable the CRA no nonvulner no exploitable vulnerabilities. So we were think okay vulnerabilities. So we were think okay vulnerabilities. So we were think okay so how do we do that? So what we do is so how do we do that? So what we do is so how do we do that? So what we do is we start scanning and put like establish we start scanning and put like establish we start scanning and put like establish a like a policy like break this if there a like a policy like break this if there a like a policy like break this if there are there are vulnerabilities. So we are there are vulnerabilities. So we are there are vulnerabilities. So we estab effectively establish it a check estab effectively establish it a check estab effectively establish it a check if something goes wrong it it fails. So if something goes wrong it it fails. So if something goes wrong it it fails. So we can check uh the so we generate an we can check uh the so we generate an we can check uh the so we generate an attestation of the of the vulnerability attestation of the of the vulnerability attestation of the of the vulnerability scan and if there are still scan and if there are still scan and if there are still vulnerabilities the policy fails. So the vulnerabilities the policy fails. So the vulnerabilities the policy fails. So the next thing that happens next thing that happens next thing that happens is hold on. Okay so we have a github is hold on. Okay so we have a github is hold on. Okay so we have a github actions process running um and then it actions process running um and then it actions process running um and then it creates the triage uh the triage issue creates the triage uh the triage issue creates the triage uh the triage issue and then this is how maintainers and then this is how maintainers and then this is how maintainers interact with the project. We have a interact with the project. We have a interact with the project. We have a chat ops interface where you come and chat ops interface where you come and chat ops interface where you come and issue the assessment. So you say no not issue the assessment. So you say no not issue the assessment. So you say no not affected the uh the vex justification of affected the uh the vex justification of affected the uh the vex justification of why it is not affected like the machine why it is not affected like the machine why it is not affected like the machine readable one and then below in the in readable one and then below in the in readable one and then below in the in the in the rest of the comment the the in the rest of the comment the the in the rest of the comment the maintainers can add u like their maintainers can add u like their maintainers can add u like their commentary on why they think this is not commentary on why they think this is not commentary on why they think this is not affected. Uh we currently only handle affected. Uh we currently only handle affected. Uh we currently only handle one assessment. So if one person says one assessment. So if one person says one assessment. So if one person says okay we ship it but we are also thinking okay we ship it but we are also thinking okay we ship it but we are also thinking well maybe we need to have two or three well maybe we need to have two or three well maybe we need to have two or three why not uh and then so after someone why not uh and then so after someone why not uh and then so after someone authorized in the owner file issues the authorized in the owner file issues the authorized in the owner file issues the assessment the the bot comes in picks up assessment the the bot comes in picks up assessment the the bot comes in picks up the um the assessment that they did the um the assessment that they did the um the assessment that they did transforms it to openex and pushes it to transforms it to openex and pushes it to transforms it to openex and pushes it to the to the attestation store. So at that the to the attestation store. So at that the to the attestation store. So at that point um you can see here this is all point um you can see here this is all point um you can see here this is all screenshots from the demo not running screenshots from the demo not running screenshots from the demo not running live but so below uh we have the live but so below uh we have the live but so below uh we have the attestation generated by vexflow the attestation generated by vexflow the attestation generated by vexflow the tool that we that we built and on top of tool that we that we built and on top of tool that we that we built and on top of that is an an attestation of the go vek that is an an attestation of the go vek that is an an attestation of the go vek output. So I'm I have another for the output. So I'm I have another for the output. So I'm I have another for the demo I have another job that runs go vol demo I have another job that runs go vol demo I have another job that runs go vol generates a vex signs it and uploads it generates a vex signs it and uploads it generates a vex signs it and uploads it to the github at the stationation store. to the github at the stationation store. to the github at the stationation store. So once we have these two, we can So once we have these two, we can So once we have these two, we can basically basically basically um collate them into the final vex um collate them into the final vex um collate them into the final vex document. So this if you see at the very document. So this if you see at the very document. So this if you see at the very top there's the uh assemble subcomand top there's the uh assemble subcomand top there's the uh assemble subcomand and you tell it which which repository and you tell it which which repository and you tell it which which repository to uh to you're working on like in in to uh to you're working on like in in to uh to you're working on like in in that case would be kubernetes kubernetes that case would be kubernetes kubernetes that case would be kubernetes kubernetes the triage repository is where vexflow the triage repository is where vexflow the triage repository is where vexflow is generating all of the assessments and is generating all of the assessments and is generating all of the assessments and then then then um so what it will do uh in this final um so what it will do uh in this final um so what it will do uh in this final final stage is that it'll go scan the final stage is that it'll go scan the final stage is that it'll go scan the repository get the currently repository get the currently repository get the currently uh the currently present vulnerabilities uh the currently present vulnerabilities uh the currently present vulnerabilities because as as the project moves over because as as the project moves over because as as the project moves over time between release and release modules time between release and release modules time between release and release modules may come up with vulnerabilities but may come up with vulnerabilities but may come up with vulnerabilities but they may disappear because like a let's they may disappear because like a let's they may disappear because like a let's say a a vulnerability was upgraded. So say a a vulnerability was upgraded. So say a a vulnerability was upgraded. So in that case we still have the the all in that case we still have the the all in that case we still have the the all of the information for the branch but uh of the information for the branch but uh of the information for the branch but uh we the the final assembly of the of the we the the final assembly of the of the we the the final assembly of the of the document only picks up the documents document only picks up the documents document only picks up the documents that apply to the vulnerabilities at that apply to the vulnerabilities at that apply to the vulnerabilities at release points. So it grabs everything release points. So it grabs everything release points. So it grabs everything and then uh and the other important and then uh and the other important and then uh and the other important thing is during the whole triage process thing is during the whole triage process thing is during the whole triage process we are generating vexes for the branch we are generating vexes for the branch we are generating vexes for the branch not for the final artifact. Okay, but not for the final artifact. Okay, but not for the final artifact. Okay, but this so this final process gives you the this so this final process gives you the this so this final process gives you the chance of of saying okay so this is the chance of of saying okay so this is the chance of of saying okay so this is the vex for my branch but also you can add vex for my branch but also you can add vex for my branch but also you can add more subjects to the to the resulting more subjects to the to the resulting more subjects to the to the resulting attestation to the vex product to to attestation to the vex product to to attestation to the vex product to to also specify your container images. So also specify your container images. So also specify your container images. So you have your container images you just you have your container images you just you have your container images you just built and then you grab all of the data built and then you grab all of the data built and then you grab all of the data from like storing the attestations and from like storing the attestations and from like storing the attestations and merge them together and you have vex merge them together and you have vex merge them together and you have vex that applies to the that applies to the that applies to the vulnerability and then so once you have vulnerability and then so once you have vulnerability and then so once you have this you feed it to the your policy this you feed it to the your policy this you feed it to the your policy engine and it passes and then the engine and it passes and then the engine and it passes and then the project gets released. So in so this is project gets released. So in so this is project gets released. So in so this is kind of the way we are doing it now. Uh kind of the way we are doing it now. Uh kind of the way we are doing it now. Uh we started running a couple of tests and we started running a couple of tests and we started running a couple of tests and everything seems to be working really everything seems to be working really everything seems to be working really well and yeah so um this is so at this well and yeah so um this is so at this well and yeah so um this is so at this point I would show you the the documents point I would show you the the documents point I would show you the the documents in the demo but um I'm happy to return in the demo but um I'm happy to return in the demo but um I'm happy to return to any of the on any any of the previous to any of the on any any of the previous to any of the on any any of the previous slides. Uh but yeah so that's it. Um slides. Uh but yeah so that's it. Um slides. Uh but yeah so that's it. Um uh we uh so the the tool is currently uh we uh so the the tool is currently uh we uh so the the tool is currently hosted here. it'll probably move to the hosted here. it'll probably move to the hosted here. it'll probably move to the to openvex or kubernetes depending on to openvex or kubernetes depending on to openvex or kubernetes depending on what happens in the next couple of what happens in the next couple of what happens in the next couple of weeks. Uh and so if anybody is weeks. Uh and so if anybody is weeks. Uh and so if anybody is interested in joining uh the projects um interested in joining uh the projects um interested in joining uh the projects um we have a regular release engineering we have a regular release engineering we have a regular release engineering meeting in SIG release uh we meet every meeting in SIG release uh we meet every meeting in SIG release uh we meet every Tuesday um alternating times and we have Tuesday um alternating times and we have Tuesday um alternating times and we have uh every other uh Monday we have uh the uh every other uh Monday we have uh the uh every other uh Monday we have uh the community meetings for openex where we community meetings for openex where we community meetings for openex where we discuss all of the tooling and all of discuss all of the tooling and all of discuss all of the tooling and all of that and yeah this is me if you want to that and yeah this is me if you want to that and yeah this is me if you want to look for me for ask questions whatever look for me for ask questions whatever look for me for ask questions whatever um yep so that that's with five minutes for questions if there with five minutes for questions if there with five minutes for questions if there are any. Hello. Hi, Munar Hafes open refactory. Hello. Hi, Munar Hafes open refactory. Hello. Hi, Munar Hafes open refactory. Uh so we are having this discussion with Uh so we are having this discussion with Uh so we are having this discussion with the Apache software foundation uh like the Apache software foundation uh like the Apache software foundation uh like multiple maintainers uh regarding multiple maintainers uh regarding multiple maintainers uh regarding whether it is good or okay to release a whether it is good or okay to release a whether it is good or okay to release a vex statement and have this in a public vex statement and have this in a public vex statement and have this in a public discussion because that information discussion because that information discussion because that information might also be useful for attackers like might also be useful for attackers like might also be useful for attackers like if something is reachable at a if something is reachable at a if something is reachable at a particular project from particular project from particular project from uh a vulnerability is reachable or not uh a vulnerability is reachable or not uh a vulnerability is reachable or not that information might be used because that information might be used because that information might be used because there's always an air gap. there's always an air gap. there's always an air gap. between uh like between the patch between uh like between the patch between uh like between the patch happening and and so on. So in in your happening and and so on. So in in your happening and and so on. So in in your case I if I understood it correctly uh case I if I understood it correctly uh case I if I understood it correctly uh there was a like uh document that was there was a like uh document that was there was a like uh document that was created for open discussion. Was that created for open discussion. Was that created for open discussion. Was that done in open format or or did you guys done in open format or or did you guys done in open format or or did you guys encounter any encounter any encounter any uh feedback on on this like whether this uh feedback on on this like whether this uh feedback on on this like whether this works and and so on? Thank you. Yeah. works and and so on? Thank you. Yeah. works and and so on? Thank you. Yeah. So, so the question is whether or not to So, so the question is whether or not to So, so the question is whether or not to uh quickly issue the VEX or like be more uh quickly issue the VEX or like be more uh quickly issue the VEX or like be more transparent or less transparent. Is that transparent or less transparent. Is that transparent or less transparent. Is that or around process or both? Well, so in in our case it's less Well, so in in our case it's less Well, so in in our case it's less opportunities because there the opportunities because there the opportunities because there the vulnerabilities are there and we're in vulnerabilities are there and we're in vulnerabilities are there and we're in in our case in our specific case we're in our case in our specific case we're in our case in our specific case we're only releasing information of only releasing information of only releasing information of vulnerabilities that are not affecting vulnerabilities that are not affecting vulnerabilities that are not affecting the product. So if you were to approach the product. So if you were to approach the product. So if you were to approach and see okay these are the list of and see okay these are the list of and see okay these are the list of vulnerabilities the the ones that you vulnerabilities the the ones that you vulnerabilities the the ones that you find vexed at least in this initial find vexed at least in this initial find vexed at least in this initial stage are not exploitable. So it it stage are not exploitable. So it it stage are not exploitable. So it it works against the attacker. In the case works against the attacker. In the case works against the attacker. In the case of the of the second feed which is the of the of the second feed which is the of the of the second feed which is the advisories the one derived from ad advisories the one derived from ad advisories the one derived from ad advisories that gets like that gets advisories that gets like that gets advisories that gets like that gets released like derived from the advisory released like derived from the advisory released like derived from the advisory data which means it already passed data which means it already passed data which means it already passed through the SRC revision the through the SRC revision the through the SRC revision the distributors were already notified and distributors were already notified and distributors were already notified and the embargo time passed governance has the embargo time passed governance has the embargo time passed governance has an embargo time to to let people adapt an embargo time to to let people adapt an embargo time to to let people adapt and we already have the new release uh and we already have the new release uh and we already have the new release uh published with a patch in it. So it's published with a patch in it. So it's published with a patch in it. So it's not it's not worse than the advisories. not it's not worse than the advisories. not it's not worse than the advisories. It's only another channel notifying them It's only another channel notifying them It's only another channel notifying them of the same uh impact. You mentioned for the go vans impact. You mentioned for the go vans impact. You mentioned for the go vans that you are getting vex from the that you are getting vex from the that you are getting vex from the maintainer assessments. Is that just the maintainer assessments. Is that just the maintainer assessments. Is that just the ones in your in the Kubernetes project ones in your in the Kubernetes project ones in your in the Kubernetes project or you're also finding VEX from other Go or you're also finding VEX from other Go or you're also finding VEX from other Go open source projects? Uh so it's so it's open source projects? Uh so it's so it's open source projects? Uh so it's so it's the the the maintainers issue their the the the maintainers issue their the the the maintainers issue their assessment on the dependenc dependencies assessment on the dependenc dependencies assessment on the dependenc dependencies that the project uses only for that the project uses only for that the project uses only for Kubernetes. Uh so we we so we can offer Kubernetes. Uh so we we so we can offer Kubernetes. Uh so we we so we can offer this to other projects inside of the this to other projects inside of the this to other projects inside of the same or if they want but right now it's same or if they want but right now it's same or if they want but right now it's only for Kubernetes. Okay. Um I had one only for Kubernetes. Okay. Um I had one only for Kubernetes. Okay. Um I had one more question. more question. more question. Oh, you mentioned Oh, you mentioned Oh, you mentioned that you're scanning the source code and that you're scanning the source code and that you're scanning the source code and you're storing the VEX for the source you're storing the VEX for the source you're storing the VEX for the source code and then but you're releasing the code and then but you're releasing the code and then but you're releasing the images, right? Yeah. So, do you scan the images, right? Yeah. So, do you scan the images, right? Yeah. So, do you scan the image with a different scanner and then image with a different scanner and then image with a different scanner and then see which vulnerabilities show up and see which vulnerabilities show up and see which vulnerabilities show up and then pull those from the source code? then pull those from the source code? then pull those from the source code? Exactly. So, we we we scan the commit so Exactly. So, we we we scan the commit so Exactly. So, we we we scan the commit so the build point. Okay. We do the the build point. Okay. We do the the build point. Okay. We do the scanning there and then everything that scanning there and then everything that scanning there and then everything that doesn't show up, we simply discard them. doesn't show up, we simply discard them. doesn't show up, we simply discard them. They they they are kept in in because They they they are kept in in because They they they are kept in in because the GitHub station story is read only. the GitHub station story is read only. the GitHub station story is read only. So they're they're there for historical So they're they're there for historical So they're they're there for historical purposes, but the when we turn the vex purposes, but the when we turn the vex purposes, but the when we turn the vex from the branch to the final image, we from the branch to the final image, we from the branch to the final image, we only carry forward those that apply. only carry forward those that apply. only carry forward those that apply. Cool. Yeah, that's really cool. Thanks. Cool. Yeah, that's really cool. Thanks. Cool. Yeah, that's really cool. Thanks. Any more questions? Let's Let's Let's eat. Thank you. Thank you.