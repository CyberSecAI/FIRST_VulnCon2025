Kind: captions Language: en Hi, my name is uh Vincent Dan. I'm the Hi, my name is uh Vincent Dan. I'm the Hi, my name is uh Vincent Dan. I'm the uh VP of product security at Red Hat. uh VP of product security at Red Hat. uh VP of product security at Red Hat. I've been involved in open source I've been involved in open source I've been involved in open source security for almost 25 years. I've been security for almost 25 years. I've been security for almost 25 years. I've been at Red Hat for 16. I was at Mandrea for at Red Hat for 16. I was at Mandrea for at Red Hat for 16. I was at Mandrea for eight years prior to that. If anyone's eight years prior to that. If anyone's eight years prior to that. If anyone's familiar with Mandrea, familiar with Mandrea, familiar with Mandrea, um I've been on a number of upstream um I've been on a number of upstream um I've been on a number of upstream open source security teams, PHP, WebKit, open source security teams, PHP, WebKit, open source security teams, PHP, WebKit, uh a number of others. I created my own uh a number of others. I created my own uh a number of others. I created my own Linux distro uh open BSD like worked on Linux distro uh open BSD like worked on Linux distro uh open BSD like worked on it for five years. Um had a number of it for five years. Um had a number of it for five years. Um had a number of users no payers. So after five years I users no payers. So after five years I users no payers. So after five years I was like I learned enough time to move was like I learned enough time to move was like I learned enough time to move on and you know spend some time with uh on and you know spend some time with uh on and you know spend some time with uh with the family right. with the family right. with the family right. Um, I say all of that because I have Um, I say all of that because I have Um, I say all of that because I have extensive experience with open source extensive experience with open source extensive experience with open source and open source security. And one of the and open source security. And one of the and open source security. And one of the things that I wanted to talk to all of things that I wanted to talk to all of things that I wanted to talk to all of you about today was some of the you about today was some of the you about today was some of the differences and similarities when it differences and similarities when it differences and similarities when it comes to open source software and comes to open source software and comes to open source software and proprietary software uh particularly in proprietary software uh particularly in proprietary software uh particularly in the area of risk acceptance uh when it the area of risk acceptance uh when it the area of risk acceptance uh when it comes to security vulnerabilities. Now we know that uh security has been Now we know that uh security has been Now we know that uh security has been top of mind across a number of top of mind across a number of top of mind across a number of industries over the last few years industries over the last few years industries over the last few years probably a decade but really ramping up probably a decade but really ramping up probably a decade but really ramping up maybe the last five years. uh we have maybe the last five years. uh we have maybe the last five years. uh we have new regulatory frameworks uh that new regulatory frameworks uh that new regulatory frameworks uh that software vendors are being required to software vendors are being required to software vendors are being required to adhere to um across all industries adhere to um across all industries adhere to um across all industries whether it's telco uh financial services whether it's telco uh financial services whether it's telco uh financial services automotive governments I know this room automotive governments I know this room automotive governments I know this room is held a lot of CRA talk yesterday so is held a lot of CRA talk yesterday so is held a lot of CRA talk yesterday so we're seeing a lot of this stuff uh AI we're seeing a lot of this stuff uh AI we're seeing a lot of this stuff uh AI regulations etc uh and we continue to regulations etc uh and we continue to regulations etc uh and we continue to see a rise in supply chain attacks and see a rise in supply chain attacks and see a rise in supply chain attacks and data breaches right uh many of them data breaches right uh many of them data breaches right uh many of them continue to make huge headlines continue to make huge headlines continue to make huge headlines sometimes on a daily basis and we know sometimes on a daily basis and we know sometimes on a daily basis and we know that there are a lot eyes on security that there are a lot eyes on security that there are a lot eyes on security right now. Uh particularly when it comes right now. Uh particularly when it comes right now. Uh particularly when it comes to open source, right? Um I also I'm to open source, right? Um I also I'm to open source, right? Um I also I'm also going to make the assertion that I also going to make the assertion that I also going to make the assertion that I think open source today is getting the think open source today is getting the think open source today is getting the short end of the stick when it comes to short end of the stick when it comes to short end of the stick when it comes to that uh observability and those eyeballs that uh observability and those eyeballs that uh observability and those eyeballs looking at looking at looking at security. I'm going to get into a few security. I'm going to get into a few security. I'm going to get into a few details and some statistics. So bear details and some statistics. So bear details and some statistics. So bear with me a bit as I kind of go back uh with me a bit as I kind of go back uh with me a bit as I kind of go back uh before I go forward. So in the uh first five years that the So in the uh first five years that the So in the uh first five years that the CVE program existed uh the annual CVE program existed uh the annual CVE program existed uh the annual numbers of new CVEs grew exponentially numbers of new CVEs grew exponentially numbers of new CVEs grew exponentially and now that can be easily attributed to and now that can be easily attributed to and now that can be easily attributed to a lot of new vendors adopting CVE and a lot of new vendors adopting CVE and a lot of new vendors adopting CVE and the program capturing more data on the program capturing more data on the program capturing more data on vulnerabilities and then over the next vulnerabilities and then over the next vulnerabilities and then over the next decade it increased by about 40% and decade it increased by about 40% and decade it increased by about 40% and then it stayed relatively steady until then it stayed relatively steady until then it stayed relatively steady until about 2017. uh but then we saw another about 2017. uh but then we saw another about 2017. uh but then we saw another 125% increase in reported CVS 125% increase in reported CVS 125% increase in reported CVS uh which then increase another 50% over uh which then increase another 50% over uh which then increase another 50% over the next six years and then last year we the next six years and then last year we the next six years and then last year we saw the largest increase we've ever seen saw the largest increase we've ever seen saw the largest increase we've ever seen in a one-year period. in a one-year period. in a one-year period. Now this can be attributed uh Now this can be attributed uh Now this can be attributed uh predominantly to the rapid development predominantly to the rapid development predominantly to the rapid development of software right more software means of software right more software means of software right more software means more vulnerabilities and last year's more vulnerabilities and last year's more vulnerabilities and last year's growth was driven heavily by the Linux growth was driven heavily by the Linux growth was driven heavily by the Linux kernel assigning a lot of CVS now CV kernel assigning a lot of CVS now CV kernel assigning a lot of CVS now CV continues to be that dominant means of continues to be that dominant means of continues to be that dominant means of representing vulnerabilities in software representing vulnerabilities in software representing vulnerabilities in software but we know it's not perfect right there but we know it's not perfect right there but we know it's not perfect right there are things that are not security issues are things that are not security issues are things that are not security issues that get CV names and there are um that get CV names and there are um that get CV names and there are um vulnerabilities that don't get CV names vulnerabilities that don't get CV names vulnerabilities that don't get CV names either. And if CVE becomes even more either. And if CVE becomes even more either. And if CVE becomes even more widely adopted, um, one example is the widely adopted, um, one example is the widely adopted, um, one example is the mobile application space where we don't mobile application space where we don't mobile application space where we don't see a lot of CVS, we could see another see a lot of CVS, we could see another see a lot of CVS, we could see another explosion in the number of CVs that we explosion in the number of CVs that we explosion in the number of CVs that we see on an annual see on an annual see on an annual basis. Now, what's critical to be aware basis. Now, what's critical to be aware basis. Now, what's critical to be aware of is that uh the guidance in 1999 to of is that uh the guidance in 1999 to of is that uh the guidance in 1999 to security practitioners uh was to patch security practitioners uh was to patch security practitioners uh was to patch everything. everything. everything. That guidance today, 25 years later, has That guidance today, 25 years later, has That guidance today, 25 years later, has not not not changed. And in under 25 years, the changed. And in under 25 years, the changed. And in under 25 years, the number of CBES has increased by a rather number of CBES has increased by a rather number of CBES has increased by a rather astonishing astonishing astonishing 4,400% comparing 1999 to 4,400% comparing 1999 to 4,400% comparing 1999 to 2024. Now, the number of vulnerabilities 2024. Now, the number of vulnerabilities 2024. Now, the number of vulnerabilities that we see are an indicator uh but that we see are an indicator uh but that we see are an indicator uh but they're not necessarily an indicator of they're not necessarily an indicator of they're not necessarily an indicator of compromise, nor are they an indicator of compromise, nor are they an indicator of compromise, nor are they an indicator of potential compromise, right? They're potential compromise, right? They're potential compromise, right? They're just a data point. We have to recognize just a data point. We have to recognize just a data point. We have to recognize that not all vulnerabilities matter. Not that not all vulnerabilities matter. Not that not all vulnerabilities matter. Not all vulnerabilities get exploited or all vulnerabilities get exploited or all vulnerabilities get exploited or will even attempt to be exploited and will even attempt to be exploited and will even attempt to be exploited and not all vulnerabilities if they are not all vulnerabilities if they are not all vulnerabilities if they are exploited actually lead to a exploited actually lead to a exploited actually lead to a compromise. There is a real data point compromise. There is a real data point compromise. There is a real data point that we have to pay attention to and that we have to pay attention to and that we have to pay attention to and that is software exploitation. So, SISA, the US Cyber Security and So, SISA, the US Cyber Security and So, SISA, the US Cyber Security and Infrastructure Security Agency, makes Infrastructure Security Agency, makes Infrastructure Security Agency, makes available a known exploited available a known exploited available a known exploited vulnerabilities database that alerts to vulnerabilities database that alerts to vulnerabilities database that alerts to proven exploitation of software in the proven exploitation of software in the proven exploitation of software in the wild and then ties that back to wild and then ties that back to wild and then ties that back to CVS. Now, using that database, we can CVS. Now, using that database, we can CVS. Now, using that database, we can see that exploitation grows see that exploitation grows see that exploitation grows year-over-year like the number of CVs year-over-year like the number of CVs year-over-year like the number of CVs does, but nowhere near the same extent does, but nowhere near the same extent does, but nowhere near the same extent as the number of CVs overall. And when as the number of CVs overall. And when as the number of CVs overall. And when we look at risk, the number of we look at risk, the number of we look at risk, the number of vulnerabilities is a useful metric, I vulnerabilities is a useful metric, I vulnerabilities is a useful metric, I guess, but it actually isn't that guess, but it actually isn't that guess, but it actually isn't that useful. Uh, as one example, in 2005, useful. Uh, as one example, in 2005, useful. Uh, as one example, in 2005, there were just under 5,000 CVs reported there were just under 5,000 CVs reported there were just under 5,000 CVs reported with only one known to be exploited, but with only one known to be exploited, but with only one known to be exploited, but not everyone who used that software was not everyone who used that software was not everyone who used that software was exploited, including those who use that exploited, including those who use that exploited, including those who use that vulnerable version. Uh, there's a slew vulnerable version. Uh, there's a slew vulnerable version. Uh, there's a slew of other factors that determine whether of other factors that determine whether of other factors that determine whether or not you may be a victim to these or not you may be a victim to these or not you may be a victim to these sorts of attacks. right? Network sorts of attacks. right? Network sorts of attacks. right? Network topology, other security technologies topology, other security technologies topology, other security technologies such as firewalls, uh basically where such as firewalls, uh basically where such as firewalls, uh basically where the software lived and what the software the software lived and what the software the software lived and what the software did. And those are all very important did. And those are all very important did. And those are all very important considerations that we tend not to take considerations that we tend not to take considerations that we tend not to take into into into account. So even then, while the number account. So even then, while the number account. So even then, while the number of CVS over that 25-y year period grew of CVS over that 25-y year period grew of CVS over that 25-y year period grew at a ridiculous rate, the amount of at a ridiculous rate, the amount of at a ridiculous rate, the amount of available software uh grew as well. Mike available software uh grew as well. Mike available software uh grew as well. Mike mentioned Kubernetes. That is a beast of mentioned Kubernetes. That is a beast of mentioned Kubernetes. That is a beast of a lot of different pieces of software, a lot of different pieces of software, a lot of different pieces of software, right? And that's relatively right? And that's relatively right? And that's relatively recent. And yet, despite all of that recent. And yet, despite all of that recent. And yet, despite all of that growth, exploitation rates stayed growth, exploitation rates stayed growth, exploitation rates stayed relatively steady. Uh you can see that relatively steady. Uh you can see that relatively steady. Uh you can see that it has always been less than 1% of known it has always been less than 1% of known it has always been less than 1% of known vulnerabilities are ever exploited and vulnerabilities are ever exploited and vulnerabilities are ever exploited and an even smaller percentage of companies an even smaller percentage of companies an even smaller percentage of companies or individuals get compromised by those or individuals get compromised by those or individuals get compromised by those globally. globally. globally. So this means that the odds of So this means that the odds of So this means that the odds of successful exploitation against a successful exploitation against a successful exploitation against a company using a software vulnerability company using a software vulnerability company using a software vulnerability are vanishingly small. Now it's easy uh to focus on small. Now it's easy uh to focus on small. Now it's easy uh to focus on technology to look for fixes, right? We technology to look for fixes, right? We technology to look for fixes, right? We make a very convenient scapegoat, but make a very convenient scapegoat, but make a very convenient scapegoat, but the real things to think about are the real things to think about are the real things to think about are pretty clear uh when you look at the pretty clear uh when you look at the pretty clear uh when you look at the sources of these breaches. Now, Verizon sources of these breaches. Now, Verizon sources of these breaches. Now, Verizon uh annually publishes a really nice uh annually publishes a really nice uh annually publishes a really nice databach investigations report and it databach investigations report and it databach investigations report and it shows that breaches through software shows that breaches through software shows that breaches through software exploitation tend to be singledigit exploitation tend to be singledigit exploitation tend to be singledigit events. Now, exploitation through people events. Now, exploitation through people events. Now, exploitation through people and process those are the sources of the and process those are the sources of the and process those are the sources of the vast majority of breaches. So, think vast majority of breaches. So, think vast majority of breaches. So, think fishing, spoofing, uh misconfigurations fishing, spoofing, uh misconfigurations fishing, spoofing, uh misconfigurations is a huge one, weak passwords and so is a huge one, weak passwords and so is a huge one, weak passwords and so forth. Um, and I personally also put the forth. Um, and I personally also put the forth. Um, and I personally also put the lack of patching when patches are lack of patching when patches are lack of patching when patches are available squarely into that people and available squarely into that people and available squarely into that people and process bucket because it certainly process bucket because it certainly process bucket because it certainly isn't a technology isn't a technology isn't a technology problem. So, let's take a look at the problem. So, let's take a look at the problem. So, let's take a look at the Verizon report that they published three Verizon report that they published three Verizon report that they published three years ago. Um, even though they noted years ago. Um, even though they noted years ago. Um, even though they noted that exploited vulnerabilities were up that exploited vulnerabilities were up that exploited vulnerabilities were up compared to previous years, the number compared to previous years, the number compared to previous years, the number of breaches caused by exploited software of breaches caused by exploited software of breaches caused by exploited software uh continues to be quite small. In 2023, uh continues to be quite small. In 2023, uh continues to be quite small. In 2023, there was about 7% of breaches were due there was about 7% of breaches were due there was about 7% of breaches were due to an exploited software vulnerability. to an exploited software vulnerability. to an exploited software vulnerability. Uh, and the 2023 report actually showed Uh, and the 2023 report actually showed Uh, and the 2023 report actually showed a decline and that number was a decline and that number was a decline and that number was 5%. Now, in all fairness, the 2024 5%. Now, in all fairness, the 2024 5%. Now, in all fairness, the 2024 report uh was higher at report uh was higher at report uh was higher at 15%. But that was driven by the highly 15%. But that was driven by the highly 15%. But that was driven by the highly exploited Move It vulnerability. I'm exploited Move It vulnerability. I'm exploited Move It vulnerability. I'm sure you're all aware of it. Um, and sure you're all aware of it. Um, and sure you're all aware of it. Um, and incidentally, I like to point out incidentally, I like to point out incidentally, I like to point out because I'm an open source practitioner, because I'm an open source practitioner, because I'm an open source practitioner, Move It is proprietary Move It is proprietary Move It is proprietary software. So, the largest contributors software. So, the largest contributors software. So, the largest contributors uh to breaches continue to be stolen uh to breaches continue to be stolen uh to breaches continue to be stolen credentials, business email compromise, credentials, business email compromise, credentials, business email compromise, uh, fishing campaigns, and improperly uh, fishing campaigns, and improperly uh, fishing campaigns, and improperly configured software. What I like to configured software. What I like to configured software. What I like to refer to as the human exploitation refer to as the human exploitation refer to as the human exploitation versus software versus software versus software exploitation. Those are all the top exploitation. Those are all the top exploitation. Those are all the top contributors to a successful breach. contributors to a successful breach. contributors to a successful breach. Now, I kept the uh 2022 report mentioned Now, I kept the uh 2022 report mentioned Now, I kept the uh 2022 report mentioned because of this particular illustration, because of this particular illustration, because of this particular illustration, which I really like. Uh most attackers which I really like. Uh most attackers which I really like. Uh most attackers perform scans for weaknesses against IPs perform scans for weaknesses against IPs perform scans for weaknesses against IPs and open ports. And of those scans, a and open ports. And of those scans, a and open ports. And of those scans, a smaller subset will demonstrate a smaller subset will demonstrate a smaller subset will demonstrate a potential weakness. A smaller number of potential weakness. A smaller number of potential weakness. A smaller number of which are actual which are actual which are actual vulnerabilities. And of those that are vulnerabilities. And of those that are vulnerabilities. And of those that are actual vulnerabilities in software, an actual vulnerabilities in software, an actual vulnerabilities in software, an even smaller subset permit remote code even smaller subset permit remote code even smaller subset permit remote code execution, which is where we see execution, which is where we see execution, which is where we see breaches starting to happen. breaches starting to happen. breaches starting to happen. Now less than 1% of what gets scanned Now less than 1% of what gets scanned Now less than 1% of what gets scanned yields remote code execution and again yields remote code execution and again yields remote code execution and again in 2022 that represented roughly 7% of in 2022 that represented roughly 7% of in 2022 that represented roughly 7% of successful breaches. Now it illustrates successful breaches. Now it illustrates successful breaches. Now it illustrates a few primary considerations. Uh first a few primary considerations. Uh first a few primary considerations. Uh first the weakest element is always the human the weakest element is always the human the weakest element is always the human element. Someone clicked something that element. Someone clicked something that element. Someone clicked something that they shouldn't have or believed they shouldn't have or believed they shouldn't have or believed something that they shouldn't something that they shouldn't something that they shouldn't have. Uh second, proper configuration have. Uh second, proper configuration have. Uh second, proper configuration and hardening of software post and hardening of software post and hardening of software post deployment is key. And finally, it's deployment is key. And finally, it's deployment is key. And finally, it's common knowledge that good security is common knowledge that good security is common knowledge that good security is best when it's built up of multiple best when it's built up of multiple best when it's built up of multiple layers. Think monitoring and detection, layers. Think monitoring and detection, layers. Think monitoring and detection, security, education, firewalls, and security, education, firewalls, and security, education, firewalls, and physical security, just to name a few. physical security, just to name a few. physical security, just to name a few. Uh patching software is one layer, but Uh patching software is one layer, but Uh patching software is one layer, but it's a statistically insignificant one it's a statistically insignificant one it's a statistically insignificant one at that. But ironically, it's also the at that. But ironically, it's also the at that. But ironically, it's also the one that gets the most attention, one that gets the most attention, one that gets the most attention, especially when it comes to open source. Uh, but that's a bit of a red source. Uh, but that's a bit of a red source. Uh, but that's a bit of a red herring because a lot of proprietary herring because a lot of proprietary herring because a lot of proprietary software these days also includes open software these days also includes open software these days also includes open source. So the uh 2025 BlackDuck open source. So the uh 2025 BlackDuck open source. So the uh 2025 BlackDuck open source security and risk analysis report source security and risk analysis report source security and risk analysis report scanned about 1,600 code bases last year scanned about 1,600 code bases last year scanned about 1,600 code bases last year and it showed that 97% of what they and it showed that 97% of what they and it showed that 97% of what they scanned contained some open source and scanned contained some open source and scanned contained some open source and that 70% of all code originated from that 70% of all code originated from that 70% of all code originated from open open open source. Now I can't get into all the source. Now I can't get into all the source. Now I can't get into all the details of the report uh but it's very details of the report uh but it's very details of the report uh but it's very interesting. I highly encourage you to interesting. I highly encourage you to interesting. I highly encourage you to read it if you haven't already. Um, and read it if you haven't already. Um, and read it if you haven't already. Um, and also incidentally, if anyone has doubted also incidentally, if anyone has doubted also incidentally, if anyone has doubted that open-source has won and is not just that open-source has won and is not just that open-source has won and is not just widely used, uh, doubt no longer. It's widely used, uh, doubt no longer. It's widely used, uh, doubt no longer. It's also widely accepted, right? Which is also widely accepted, right? Which is also widely accepted, right? Which is great. The software development rules great. The software development rules great. The software development rules changed. Uh, open source is not that changed. Uh, open source is not that changed. Uh, open source is not that outlier that it used to be anymore, but outlier that it used to be anymore, but outlier that it used to be anymore, but the software risk assessment rules the software risk assessment rules the software risk assessment rules haven't changed. So, what do I mean by haven't changed. So, what do I mean by haven't changed. So, what do I mean by that? that? that? Well, open source by its very nature is Well, open source by its very nature is Well, open source by its very nature is open, right? The code is open, reporting open, right? The code is open, reporting open, right? The code is open, reporting is open, bugs are visible. This means is open, bugs are visible. This means is open, bugs are visible. This means that security relevant bugs are easy that security relevant bugs are easy that security relevant bugs are easy enough to find. And it very much means enough to find. And it very much means enough to find. And it very much means that the emperor has no clothes. that the emperor has no clothes. that the emperor has no clothes. Everything is visible. Everything is visible. Everything is visible. But it also means that anything that But it also means that anything that But it also means that anything that looks remotely like a security issue, no looks remotely like a security issue, no looks remotely like a security issue, no matter how improbable or unlikely it is matter how improbable or unlikely it is matter how improbable or unlikely it is to cause any kind of damage, is labeled to cause any kind of damage, is labeled to cause any kind of damage, is labeled as a security issue. Well, why? Because as a security issue. Well, why? Because as a security issue. Well, why? Because transparency is a core tenant to open transparency is a core tenant to open transparency is a core tenant to open source. It's not possible to hide source. It's not possible to hide source. It's not possible to hide something. So, we call it for what it something. So, we call it for what it something. So, we call it for what it is. And this is why you see so many is. And this is why you see so many is. And this is why you see so many vulnerabilities in open source spread vulnerabilities in open source spread vulnerabilities in open source spread across a variety of impacts. and they across a variety of impacts. and they across a variety of impacts. and they tend to land uh to land in that lower tend to land uh to land in that lower tend to land uh to land in that lower half. Uh the industry typically rates half. Uh the industry typically rates half. Uh the industry typically rates severity impact by critical, important severity impact by critical, important severity impact by critical, important or high, moderate or medium and low. And or high, moderate or medium and low. And or high, moderate or medium and low. And most open source vulnerabilities tend to most open source vulnerabilities tend to most open source vulnerabilities tend to float in that moderate float in that moderate float in that moderate range. And when we talk about impact range. And when we talk about impact range. And when we talk about impact ratings, we mean the impact of ratings, we mean the impact of ratings, we mean the impact of successful exploitation and the successful exploitation and the successful exploitation and the conditions to exploit. Right? Right. So conditions to exploit. Right? Right. So conditions to exploit. Right? Right. So a critical vulnerability is one that is a critical vulnerability is one that is a critical vulnerability is one that is very easy uh to exploit and also yields very easy uh to exploit and also yields very easy uh to exploit and also yields high privileges. So think remote code high privileges. So think remote code high privileges. So think remote code execution by an unauthenticated user. An execution by an unauthenticated user. An execution by an unauthenticated user. An important rating would be given to an important rating would be given to an important rating would be given to an issue with basically the same yield the issue with basically the same yield the issue with basically the same yield the same impact but it's more difficult to same impact but it's more difficult to same impact but it's more difficult to exploit. Maybe you need to be local exploit. Maybe you need to be local exploit. Maybe you need to be local rather than remote or it requires some rather than remote or it requires some rather than remote or it requires some kind of authentication. kind of authentication. kind of authentication. Now, moderate issues are those that are Now, moderate issues are those that are Now, moderate issues are those that are even harder to exploit, require unlikely even harder to exploit, require unlikely even harder to exploit, require unlikely configurations or configurations or configurations or misconfigurations and would yield less misconfigurations and would yield less misconfigurations and would yield less impact to confidentiality, integrity or impact to confidentiality, integrity or impact to confidentiality, integrity or availability. And then finally, low availability. And then finally, low availability. And then finally, low issues are those that yield minimal issues are those that yield minimal issues are those that yield minimal consequences and require some really consequences and require some really consequences and require some really unlikely uh configurations or unlikely uh configurations or unlikely uh configurations or circumstances. Personally, I just like circumstances. Personally, I just like circumstances. Personally, I just like to call Lowe's regular books. to call Lowe's regular books. to call Lowe's regular books. So, if you're here and you've dealt with So, if you're here and you've dealt with So, if you're here and you've dealt with CVS, like I'm sure that all of you have, CVS, like I'm sure that all of you have, CVS, like I'm sure that all of you have, uh, you can also see here a part of the uh, you can also see here a part of the uh, you can also see here a part of the CBSS user guide that proves that the CBSS user guide that proves that the CBSS user guide that proves that the industry has been using CVSS wrong industry has been using CVSS wrong industry has been using CVSS wrong pretty much since its inception, right? pretty much since its inception, right? pretty much since its inception, right? Uh, CBSS base scores do not measure Uh, CBSS base scores do not measure Uh, CBSS base scores do not measure risk. Thank you. That there's a round of risk. Thank you. That there's a round of risk. Thank you. That there's a round of applause for that one. Right. CBSS does applause for that one. Right. CBSS does applause for that one. Right. CBSS does not measure risk. It's a prioritization not measure risk. It's a prioritization not measure risk. It's a prioritization mechanism so that you know if you have a mechanism so that you know if you have a mechanism so that you know if you have a dozen vulnerabilities which one should dozen vulnerabilities which one should dozen vulnerabilities which one should you be addressing you be addressing you be addressing first. Um CBSS is a fantastic guide when first. Um CBSS is a fantastic guide when first. Um CBSS is a fantastic guide when it's used correctly but unfortunately it's used correctly but unfortunately it's used correctly but unfortunately most people and software do not use it correctly. So let's take a look at some correctly. So let's take a look at some correctly. So let's take a look at some real data. Now, Red Hat as an enterprise real data. Now, Red Hat as an enterprise real data. Now, Red Hat as an enterprise open source vendor uh does not hide open source vendor uh does not hide open source vendor uh does not hide vulnerabilities and we are very vulnerabilities and we are very vulnerabilities and we are very transparent with our data. Every year we transparent with our data. Every year we transparent with our data. Every year we publish a risk report that Crob is very publish a risk report that Crob is very publish a risk report that Crob is very happy he doesn't have to work on happy he doesn't have to work on happy he doesn't have to work on anymore. Um and that goes into a lot of anymore. Um and that goes into a lot of anymore. Um and that goes into a lot of detail um and what we saw and dealt with detail um and what we saw and dealt with detail um and what we saw and dealt with during that year. Now, these are during that year. Now, these are during that year. Now, these are preliminary numbers. The report's going preliminary numbers. The report's going preliminary numbers. The report's going to be published, I'm told, next week, so to be published, I'm told, next week, so to be published, I'm told, next week, so you'll be able to see all the gory you'll be able to see all the gory you'll be able to see all the gory details then. But the good stuff is details then. But the good stuff is details then. But the good stuff is here. Um, and these numbers tell us a here. Um, and these numbers tell us a here. Um, and these numbers tell us a few important things, right? And I few important things, right? And I few important things, right? And I believe that you cannot call any believe that you cannot call any believe that you cannot call any software totally secure, but I do software totally secure, but I do software totally secure, but I do believe that this demonstrates that open believe that this demonstrates that open believe that this demonstrates that open source is source is source is trustworthy. Now, it also highlights trustworthy. Now, it also highlights trustworthy. Now, it also highlights that while there might be a lot of CVEes that while there might be a lot of CVEes that while there might be a lot of CVEes in open source, most of them do not get in open source, most of them do not get in open source, most of them do not get actively actively actively exploited. So for an enterprise open exploited. So for an enterprise open exploited. So for an enterprise open source vendor like Red Hat where our source vendor like Red Hat where our source vendor like Red Hat where our customers depend on us for stability, it customers depend on us for stability, it customers depend on us for stability, it doesn't make sense to patch everything. doesn't make sense to patch everything. doesn't make sense to patch everything. Um as one example we had over 200 CVES Um as one example we had over 200 CVES Um as one example we had over 200 CVES that we rated moderate last year and not that we rated moderate last year and not that we rated moderate last year and not one of them is known to be exploit not one of them is known to be exploit not one of them is known to be exploit not one. It also highlights uh the one. It also highlights uh the one. It also highlights uh the ramifications of the Linux kernel ramifications of the Linux kernel ramifications of the Linux kernel becoming a CNA. Uh the total number of becoming a CNA. Uh the total number of becoming a CNA. Uh the total number of vulnerabilities in the Linux kernel that vulnerabilities in the Linux kernel that vulnerabilities in the Linux kernel that we had represented here were we had represented here were we had represented here were 2760 which also represents 69% of all 2760 which also represents 69% of all 2760 which also represents 69% of all the vulnerabilities affecting all of our the vulnerabilities affecting all of our the vulnerabilities affecting all of our products. products. products. It also contributed to the 138% increase It also contributed to the 138% increase It also contributed to the 138% increase in CBEEs affecting all of Red Hat's in CBEEs affecting all of Red Hat's in CBEEs affecting all of Red Hat's products uh between 2023 and 2024. Now, products uh between 2023 and 2024. Now, products uh between 2023 and 2024. Now, as a frame of reference, I looked back as a frame of reference, I looked back as a frame of reference, I looked back in 2023 only 11.3% of those CVS were in in 2023 only 11.3% of those CVS were in in 2023 only 11.3% of those CVS were in the Linux kernel. So, thank you upstream. Okay, not to dig on the Linux upstream. Okay, not to dig on the Linux upstream. Okay, not to dig on the Linux kernel. I love the Linux kernel. Uh but kernel. I love the Linux kernel. Uh but kernel. I love the Linux kernel. Uh but what about proprietary software? Right what about proprietary software? Right what about proprietary software? Right now, I'm not going to name names, uh, now, I'm not going to name names, uh, now, I'm not going to name names, uh, but this is public data provided by a but this is public data provided by a but this is public data provided by a major proprietary vendor. Um, and you'll major proprietary vendor. Um, and you'll major proprietary vendor. Um, and you'll also note that on the previous slide, I also note that on the previous slide, I also note that on the previous slide, I used the word discovered, and here I'm used the word discovered, and here I'm used the word discovered, and here I'm using the word reported for a very using the word reported for a very using the word reported for a very specific reason that I'll get to in a specific reason that I'll get to in a specific reason that I'll get to in a moment. Now, looking at CVEes with a moment. Now, looking at CVEes with a moment. Now, looking at CVEes with a release date in 2024, there are some release date in 2024, there are some release date in 2024, there are some striking differences from the Red Hat striking differences from the Red Hat striking differences from the Red Hat risk report. risk report. risk report. uh first they had reported 1397 uh first they had reported 1397 uh first they had reported 1397 vulnerabilities as affecting them yet vulnerabilities as affecting them yet vulnerabilities as affecting them yet only 1121 had a severity rating. Now only 1121 had a severity rating. Now only 1121 had a severity rating. Now this vendor uses the exact same this vendor uses the exact same this vendor uses the exact same four-point rating scale that we do. So I four-point rating scale that we do. So I four-point rating scale that we do. So I find that omission uh curious and find that omission uh curious and find that omission uh curious and interesting. Now on the surface uh both interesting. Now on the surface uh both interesting. Now on the surface uh both exploitation rates are quite low exploitation rates are quite low exploitation rates are quite low although their exploitation rate is much although their exploitation rate is much although their exploitation rate is much higher amongst moderate issues and it's higher amongst moderate issues and it's higher amongst moderate issues and it's quite low on those higher rated quite low on those higher rated quite low on those higher rated vulnerabilities and the overall vulnerabilities and the overall vulnerabilities and the overall exploitation rate is significantly exploitation rate is significantly exploitation rate is significantly higher than Red Hats although there are higher than Red Hats although there are higher than Red Hats although there are much less total vulnerabilities but I much less total vulnerabilities but I much less total vulnerabilities but I think that there's a better way that we think that there's a better way that we think that there's a better way that we can kind of compare and contrast the can kind of compare and contrast the can kind of compare and contrast the two. two. two. uh but when we look at the overall uh but when we look at the overall uh but when we look at the overall weight of uh vulnerability ratings I I weight of uh vulnerability ratings I I weight of uh vulnerability ratings I I think there are two things that we have think there are two things that we have think there are two things that we have to keep in mind right one is that to keep in mind right one is that to keep in mind right one is that ratings are pretty objective and ratings are pretty objective and ratings are pretty objective and consistent. So if you have an easily consistent. So if you have an easily consistent. So if you have an easily exploitable vulnerability that results exploitable vulnerability that results exploitable vulnerability that results in arbitrary code execution without in arbitrary code execution without in arbitrary code execution without authentication every single vulner uh authentication every single vulner uh authentication every single vulner uh vendor is going to call that critical. vendor is going to call that critical. vendor is going to call that critical. If you have a temporary file race If you have a temporary file race If you have a temporary file race condition that requires shell access, condition that requires shell access, condition that requires shell access, pretty much every vendor is going to pretty much every vendor is going to pretty much every vendor is going to call that low. Uh second, the use of call that low. Uh second, the use of call that low. Uh second, the use of that software and thus the resulting that software and thus the resulting that software and thus the resulting impact might be different, right? So uh impact might be different, right? So uh impact might be different, right? So uh you might see the same CVE rated you might see the same CVE rated you might see the same CVE rated differently in different products. differently in different products. differently in different products. Redhead does this often. Um using us as Redhead does this often. Um using us as Redhead does this often. Um using us as an example, we may have the same an example, we may have the same an example, we may have the same component in Red Hat Enterprise Linux component in Red Hat Enterprise Linux component in Red Hat Enterprise Linux and it might be rated higher than that and it might be rated higher than that and it might be rated higher than that same component used in Red Hat Open same component used in Red Hat Open same component used in Red Hat Open Shift. Shift. Shift. Uh so for real because it's an operating Uh so for real because it's an operating Uh so for real because it's an operating system we literally have no idea how system we literally have no idea how system we literally have no idea how that specific component might be used. that specific component might be used. that specific component might be used. So we look at it from the worst case So we look at it from the worst case So we look at it from the worst case scenario. Uh in open shift however that scenario. Uh in open shift however that scenario. Uh in open shift however that component might be used in a very component might be used in a very component might be used in a very specific way that no user or no attacker specific way that no user or no attacker specific way that no user or no attacker can actually get to and it's used in a can actually get to and it's used in a can actually get to and it's used in a nonvulnerable way. Uh so we're going to nonvulnerable way. Uh so we're going to nonvulnerable way. Uh so we're going to rate it lower because it's effectively rate it lower because it's effectively rate it lower because it's effectively internal plumbing. There's no path to internal plumbing. There's no path to internal plumbing. There's no path to execution. Nobody can tamper with it. it execution. Nobody can tamper with it. it execution. Nobody can tamper with it. it literally doesn't matter. Now, that literally doesn't matter. Now, that literally doesn't matter. Now, that distinction is important because I'm distinction is important because I'm distinction is important because I'm going to probably guess here that even going to probably guess here that even going to probably guess here that even given a fairly wide margin of error, given a fairly wide margin of error, given a fairly wide margin of error, there should be some consistency across there should be some consistency across there should be some consistency across the board in terms of the number of the board in terms of the number of the board in terms of the number of critical vulnerabilities in the critical vulnerabilities in the critical vulnerabilities in the ecosystem to the number of moderate and ecosystem to the number of moderate and ecosystem to the number of moderate and low vulnerabilities in the ecosystem. low vulnerabilities in the ecosystem. low vulnerabilities in the ecosystem. Unless we have some very terrible go big Unless we have some very terrible go big Unless we have some very terrible go big or go home type developers who like to or go home type developers who like to or go home type developers who like to create these monstrous uh security create these monstrous uh security create these monstrous uh security issues. issues. issues. But as you can see here, comparing Red But as you can see here, comparing Red But as you can see here, comparing Red Hat to this proprietary vendor, the Hat to this proprietary vendor, the Hat to this proprietary vendor, the numbers are numbers are numbers are inverted. We had less than a quarter of inverted. We had less than a quarter of inverted. We had less than a quarter of 1% of our total vulnerabilities 1% of our total vulnerabilities 1% of our total vulnerabilities discovered that we rated critical. And discovered that we rated critical. And discovered that we rated critical. And this vendor had 28 times that which were this vendor had 28 times that which were this vendor had 28 times that which were rated critical. We had less than 8% rated critical. We had less than 8% rated critical. We had less than 8% rated important. And this vendor had rated important. And this vendor had rated important. And this vendor had nearly 88% rated the same way. nearly 88% rated the same way. nearly 88% rated the same way. uh the bulk of the open source uh the bulk of the open source uh the bulk of the open source vulnerabilities in our products or 92% vulnerabilities in our products or 92% vulnerabilities in our products or 92% are rated moderate and low and this are rated moderate and low and this are rated moderate and low and this vendor had a very very small 5 and a vendor had a very very small 5 and a vendor had a very very small 5 and a half% of their vulnerabilities rated half% of their vulnerabilities rated half% of their vulnerabilities rated moderate and moderate and moderate and low. Now what's even more curious is low. Now what's even more curious is low. Now what's even more curious is that out of the 62 vulnerabilities that that out of the 62 vulnerabilities that that out of the 62 vulnerabilities that this vendor reported as moderate and this vendor reported as moderate and this vendor reported as moderate and low, 41 of them were actually in open- low, 41 of them were actually in open- low, 41 of them were actually in open- source components and publicly known as source components and publicly known as source components and publicly known as a result. And as a side note, despite a result. And as a side note, despite a result. And as a side note, despite the increased kernel CVs, the overall the increased kernel CVs, the overall the increased kernel CVs, the overall waiting comparing the two uh was waiting comparing the two uh was waiting comparing the two uh was virtually unchanged when I did the same virtually unchanged when I did the same virtually unchanged when I did the same comparison last year for 2023. So the only logical conclusion 2023. So the only logical conclusion 2023. So the only logical conclusion that uh at least I can infer here uh is that uh at least I can infer here uh is that uh at least I can infer here uh is that not only did the software that not only did the software that not only did the software development rules change, the security development rules change, the security development rules change, the security reporting rules changed as well. Now reporting rules changed as well. Now reporting rules changed as well. Now remember that I said that Red Hat had remember that I said that Red Hat had remember that I said that Red Hat had discovered 4272 vulnerabilities discovered 4272 vulnerabilities discovered 4272 vulnerabilities affecting our products and 1397 affecting our products and 1397 affecting our products and 1397 vulnerabilities were reported by this vulnerabilities were reported by this vulnerabilities were reported by this proprietary vendor. Now proprietary proprietary vendor. Now proprietary proprietary vendor. Now proprietary software by its very nature is opaque. software by its very nature is opaque. software by its very nature is opaque. You can't see the code and if a You can't see the code and if a You can't see the code and if a vulnerability exists, the only way vulnerability exists, the only way vulnerability exists, the only way you're going to know about it is if you're going to know about it is if you're going to know about it is if somebody tells you. You can't discover somebody tells you. You can't discover somebody tells you. You can't discover it by looking at the source code that it by looking at the source code that it by looking at the source code that you don't have access to. uh you can't you don't have access to. uh you can't you don't have access to. uh you can't even quickly determine if a bug that you even quickly determine if a bug that you even quickly determine if a bug that you find is security relevant without find is security relevant without find is security relevant without sometimes significant effort. Uh but sometimes significant effort. Uh but sometimes significant effort. Uh but that doesn't mean that those that doesn't mean that those that doesn't mean that those vulnerabilities aren't vulnerabilities aren't vulnerabilities aren't there. Now, most proprietary vendors there. Now, most proprietary vendors there. Now, most proprietary vendors will tell you about the critical and will tell you about the critical and will tell you about the critical and important issues because they're the important issues because they're the important issues because they're the easiest to find, the easiest to exploit, easiest to find, the easiest to exploit, easiest to find, the easiest to exploit, and they're the ones that cause the most and they're the ones that cause the most and they're the ones that cause the most damage. and they rightly in my opinion damage. and they rightly in my opinion damage. and they rightly in my opinion ignore the moderate and low issues ignore the moderate and low issues ignore the moderate and low issues either by not giving them a CVE in either by not giving them a CVE in either by not giving them a CVE in public uh when they fix them or probably public uh when they fix them or probably public uh when they fix them or probably by not fixing them at all. So this has by not fixing them at all. So this has by not fixing them at all. So this has two impacts, right? First, it lowers the two impacts, right? First, it lowers the two impacts, right? First, it lowers the total number of vulnerabilities which total number of vulnerabilities which total number of vulnerabilities which maybe amplifies the look how secure we maybe amplifies the look how secure we maybe amplifies the look how secure we are messaging that PR teams love to are messaging that PR teams love to are messaging that PR teams love to throw out there. Uh but then second is throw out there. Uh but then second is throw out there. Uh but then second is the end user. You can't mitigate what the end user. You can't mitigate what the end user. You can't mitigate what you don't know about. Now open sourc's transparency is about. Now open sourc's transparency is about. Now open sourc's transparency is more a this might be a little more a this might be a little more a this might be a little contentious a problem for a compliance contentious a problem for a compliance contentious a problem for a compliance auditor than it is for real security. auditor than it is for real security. auditor than it is for real security. Right? It means that you will have Right? It means that you will have Right? It means that you will have vulnerabilities that show up on a vulnerabilities that show up on a vulnerabilities that show up on a checklist and you might not be able to checklist and you might not be able to checklist and you might not be able to tick that box and that's okay. This is tick that box and that's okay. This is tick that box and that's okay. This is where actual risk assessments come into where actual risk assessments come into where actual risk assessments come into play and it affords advantages, right? play and it affords advantages, right? play and it affords advantages, right? You can mitigate without patching You can mitigate without patching You can mitigate without patching software. If you know about it and you software. If you know about it and you software. If you know about it and you know how it may be exposed if there are know how it may be exposed if there are know how it may be exposed if there are no mitigations and it's truly impactful no mitigations and it's truly impactful no mitigations and it's truly impactful duty or use of it, uh you can approach duty or use of it, uh you can approach duty or use of it, uh you can approach your vendor assuming that you're paying your vendor assuming that you're paying your vendor assuming that you're paying for it uh for a fix or you can simply for it uh for a fix or you can simply for it uh for a fix or you can simply rip it out and replace it with something rip it out and replace it with something rip it out and replace it with something else that you're more comfortable with. else that you're more comfortable with. else that you're more comfortable with. Right? You have Right? You have Right? You have options. Now, the most important options. Now, the most important options. Now, the most important takeaway here is that proprietary takeaway here is that proprietary takeaway here is that proprietary vendors are under no obligation to tell vendors are under no obligation to tell vendors are under no obligation to tell you that they have found vulnerabilities you that they have found vulnerabilities you that they have found vulnerabilities and there are few ways, if any, to hold and there are few ways, if any, to hold and there are few ways, if any, to hold them them them accountable. They will inform you of accountable. They will inform you of accountable. They will inform you of those that are truly risky to help those that are truly risky to help those that are truly risky to help customers avoid significant risk and the customers avoid significant risk and the customers avoid significant risk and the rest they will admit to if a security rest they will admit to if a security rest they will admit to if a security researcher finds it and discloses it researcher finds it and discloses it researcher finds it and discloses it publicly. Thank you, Black Hat and publicly. Thank you, Black Hat and publicly. Thank you, Black Hat and Defco. Defco. Defco. Now I believe that proprietary vendors Now I believe that proprietary vendors Now I believe that proprietary vendors want to protect their customers from want to protect their customers from want to protect their customers from meaningful security issues. Now open meaningful security issues. Now open meaningful security issues. Now open source does not have the luxury perhaps source does not have the luxury perhaps source does not have the luxury perhaps if we want to call it that of not if we want to call it that of not if we want to call it that of not informing end users about security informing end users about security informing end users about security issues. They are open and will always be issues. They are open and will always be issues. They are open and will always be public. And this means that we have to public. And this means that we have to public. And this means that we have to be comfortable with explicitly accepting be comfortable with explicitly accepting be comfortable with explicitly accepting known lower severity risk in open source known lower severity risk in open source known lower severity risk in open source because you're already accepting unknown because you're already accepting unknown because you're already accepting unknown lower severity risk from proprietary lower severity risk from proprietary lower severity risk from proprietary vendors vendors vendors implicitly. And it doesn't make sense to implicitly. And it doesn't make sense to implicitly. And it doesn't make sense to judge the open and transparent more judge the open and transparent more judge the open and transparent more harshly than the closed and opaque. And harshly than the closed and opaque. And harshly than the closed and opaque. And yet that happens every single day. Now, proper risk assessments mean day. Now, proper risk assessments mean day. Now, proper risk assessments mean looking beyond a list of CVs. Most looking beyond a list of CVs. Most looking beyond a list of CVs. Most vulnerability scanners will tell you vulnerability scanners will tell you vulnerability scanners will tell you that they have this that they have this that they have this covered. And in deference to the covered. And in deference to the covered. And in deference to the wonderful vendors who supported our wonderful vendors who supported our wonderful vendors who supported our conference today, I don't want to be too conference today, I don't want to be too conference today, I don't want to be too harsh. Um, but I don't think they do a harsh. Um, but I don't think they do a harsh. Um, but I don't think they do a very good very good very good job. I'm not being too harsh. job. I'm not being too harsh. job. I'm not being too harsh. very few take uh with anal exception of very few take uh with anal exception of very few take uh with anal exception of some of the vendors I saw this week that some of the vendors I saw this week that some of the vendors I saw this week that actually are doing some very novel actually are doing some very novel actually are doing some very novel intelligent uh risk assessments with uh intelligent uh risk assessments with uh intelligent uh risk assessments with uh scanning uh but very few take those scanning uh but very few take those scanning uh but very few take those applications your environment and your applications your environment and your applications your environment and your use of that software into account. uh use of that software into account. uh use of that software into account. uh many end up reporting just a lot of many end up reporting just a lot of many end up reporting just a lot of noise without applying any intelligence noise without applying any intelligence noise without applying any intelligence or remediation suggestions beyond the or remediation suggestions beyond the or remediation suggestions beyond the old get a patch and most very old get a patch and most very old get a patch and most very aggravatingly tend to equate CVSS base aggravatingly tend to equate CVSS base aggravatingly tend to equate CVSS base scores provided by the NVD with risk and scores provided by the NVD with risk and scores provided by the NVD with risk and most tend to ignore vendor provided most tend to ignore vendor provided most tend to ignore vendor provided data and that volume has only gotten data and that volume has only gotten data and that volume has only gotten bigger and noisier with containerized bigger and noisier with containerized bigger and noisier with containerized deployments where your infrastructure deployments where your infrastructure deployments where your infrastructure can have hundreds of containers affected can have hundreds of containers affected can have hundreds of containers affected by the same CVE and we're counting that by the same CVE and we're counting that by the same CVE and we're counting that CVE over and over and over CVE over and over and over CVE over and over and over again. Now, I'm personally looking again. Now, I'm personally looking again. Now, I'm personally looking forward to potentially the use of AI in forward to potentially the use of AI in forward to potentially the use of AI in this space to maybe help better surface this space to maybe help better surface this space to maybe help better surface real risk to end users. Uh if our goal real risk to end users. Uh if our goal real risk to end users. Uh if our goal is risk reduction, which it should be, is risk reduction, which it should be, is risk reduction, which it should be, uh then we need to realize that what uh then we need to realize that what uh then we need to realize that what we're doing actually isn't working. we're doing actually isn't working. we're doing actually isn't working. If 80% of our security budgets and tools If 80% of our security budgets and tools If 80% of our security budgets and tools are being spent to find software are being spent to find software are being spent to find software vulnerabilities that don't get exploited vulnerabilities that don't get exploited vulnerabilities that don't get exploited rather than solving the human element rather than solving the human element rather than solving the human element where 80% of the breaches we see happen, where 80% of the breaches we see happen, where 80% of the breaches we see happen, then our priorities are wrong and we're then our priorities are wrong and we're then our priorities are wrong and we're going to continue to see more breaches, going to continue to see more breaches, going to continue to see more breaches, more data exfiltration, more customer more data exfiltration, more customer more data exfiltration, more customer data misused and more ransomware data misused and more ransomware data misused and more ransomware demands. uh proper risk assessments actually uh proper risk assessments actually uh proper risk assessments actually assessing risk and mitigating what is assessing risk and mitigating what is assessing risk and mitigating what is most impactful and most probable. Right? most impactful and most probable. Right? most impactful and most probable. Right? Proper risk assessment is not no known Proper risk assessment is not no known Proper risk assessment is not no known vulnerabilities. That is a game that we vulnerabilities. That is a game that we vulnerabilities. That is a game that we are uh we are losing and it is only are uh we are losing and it is only are uh we are losing and it is only going to get worse. Uh there is a cost going to get worse. Uh there is a cost going to get worse. Uh there is a cost to chasing that no known vulnerabilities to chasing that no known vulnerabilities to chasing that no known vulnerabilities dream and it is very very high. Now, a dream and it is very very high. Now, a dream and it is very very high. Now, a proper risk assessment will tell you proper risk assessment will tell you proper risk assessment will tell you that you can ignore tar in a container that you can ignore tar in a container that you can ignore tar in a container unless you're actually untarring unless you're actually untarring unless you're actually untarring untrusted input from remote users, untrusted input from remote users, untrusted input from remote users, right? Otherwise, it's meaningless. It's right? Otherwise, it's meaningless. It's right? Otherwise, it's meaningless. It's going to tell you that you can ignore going to tell you that you can ignore going to tell you that you can ignore kernel driver CVEs for hardware that you kernel driver CVEs for hardware that you kernel driver CVEs for hardware that you don't even run in your environment and don't even run in your environment and don't even run in your environment and are only exposed to on a container are only exposed to on a container are only exposed to on a container platform if properly configured would platform if properly configured would platform if properly configured would require a high level of privilege to require a high level of privilege to require a high level of privilege to access or exploit anyways. And if an access or exploit anyways. And if an access or exploit anyways. And if an attacker already has that privilege, attacker already has that privilege, attacker already has that privilege, then they don't need to exploit USB then they don't need to exploit USB then they don't need to exploit USB traffic or load a wireless driver to get traffic or load a wireless driver to get traffic or load a wireless driver to get it. They've already got it. And that's it. They've already got it. And that's it. They've already got it. And that's why Red Hat at least, and I know a why Red Hat at least, and I know a why Red Hat at least, and I know a number of other vendors as well, uh number of other vendors as well, uh number of other vendors as well, uh focus on those critical and important focus on those critical and important focus on those critical and important vulnerabilities across all of our vulnerabilities across all of our vulnerabilities across all of our products. And we treat any moderate or products. And we treat any moderate or products. And we treat any moderate or low that becomes actively exploited in low that becomes actively exploited in low that becomes actively exploited in the wild as a critical. And we're going the wild as a critical. And we're going the wild as a critical. And we're going to get a fix out right away because then to get a fix out right away because then to get a fix out right away because then it's actually it's actually it's actually meaningful. If we go back to those meaningful. If we go back to those meaningful. If we go back to those earlier numbers from last year, that's earlier numbers from last year, that's earlier numbers from last year, that's zero vulnerabilities out of over 3,900 zero vulnerabilities out of over 3,900 zero vulnerabilities out of over 3,900 moderates, moderates and lows. That's moderates, moderates and lows. That's moderates, moderates and lows. That's 3,900 vulnerabilities where we're not 3,900 vulnerabilities where we're not 3,900 vulnerabilities where we're not introducing code changes that could have introducing code changes that could have introducing code changes that could have other impacts to a customer environment. other impacts to a customer environment. other impacts to a customer environment. And it's 3,900 that our customers don't And it's 3,900 that our customers don't And it's 3,900 that our customers don't have to test and upgrade. Now, in 2023, have to test and upgrade. Now, in 2023, have to test and upgrade. Now, in 2023, there were three vulnerabilities and there were three vulnerabilities and there were three vulnerabilities and over,300 that were known to be over,300 that were known to be over,300 that were known to be exploited. Those are the impactful exploited. Those are the impactful exploited. Those are the impactful ones. And since we're talking about ones. And since we're talking about ones. And since we're talking about exploitation and risk, uh can anyone exploitation and risk, uh can anyone exploitation and risk, uh can anyone tell me what's wrong with this alert uh tell me what's wrong with this alert uh tell me what's wrong with this alert uh that SISA released in September of last year? Adobe Flash. I year? Adobe Flash. I year? Adobe Flash. I mean, mic drop maybe. Yes. Um, I mean on mean, mic drop maybe. Yes. Um, I mean on mean, mic drop maybe. Yes. Um, I mean on the one hand it, uh, you know, 10 years the one hand it, uh, you know, 10 years the one hand it, uh, you know, 10 years to widely exploit a flash vulnerability to widely exploit a flash vulnerability to widely exploit a flash vulnerability is interesting because those did tend to is interesting because those did tend to is interesting because those did tend to be exploited pretty quickly. Persistent. Yes. Um, but the quickly. Persistent. Yes. Um, but the quickly. Persistent. Yes. Um, but the real problem is that Flash went end of real problem is that Flash went end of real problem is that Flash went end of life in 2020 over four years ago. life in 2020 over four years ago. life in 2020 over four years ago. So since SISA's audience is primarily So since SISA's audience is primarily So since SISA's audience is primarily the US government, we can assume that the US government, we can assume that the US government, we can assume that they saw exploitation of four they saw exploitation of four they saw exploitation of four 10-year-old vulnerabilities in a product 10-year-old vulnerabilities in a product 10-year-old vulnerabilities in a product that no one should have been using for that no one should have been using for that no one should have been using for the last 5 years. That's a problem. And the last 5 years. That's a problem. And the last 5 years. That's a problem. And this is why software life cycles matter this is why software life cycles matter this is why software life cycles matter more than you think. uh when someone more than you think. uh when someone more than you think. uh when someone complains to me about wanting fixes for complains to me about wanting fixes for complains to me about wanting fixes for low-rated vulnerabilities in in a low-rated vulnerabilities in in a low-rated vulnerabilities in in a currently supported product and then I currently supported product and then I currently supported product and then I find out they're still using real 4 find out they're still using real 4 find out they're still using real 4 which went end of life eight years ago I which went end of life eight years ago I which went end of life eight years ago I have a really hard time in believing have a really hard time in believing have a really hard time in believing them when they say security matters and them when they say security matters and them when they say security matters and that that lowrated vulnerability is that that lowrated vulnerability is that that lowrated vulnerability is impactful to you I have a really hard impactful to you I have a really hard impactful to you I have a really hard time so old unsupported software is like time so old unsupported software is like time so old unsupported software is like Swiss cheese right full of holes now Swiss cheese right full of holes now Swiss cheese right full of holes now don't think that you can avoid large don't think that you can avoid large don't think that you can avoid large upgrades by demanding smaller upgrades by demanding smaller upgrades by demanding smaller incremental incremental incremental patches. Generally speaking, uh keeping patches. Generally speaking, uh keeping patches. Generally speaking, uh keeping software up to date within vendor software up to date within vendor software up to date within vendor supported cycles will dramatically supported cycles will dramatically supported cycles will dramatically reduce your risk. And that means when reduce your risk. And that means when reduce your risk. And that means when you're planning your IT life cycle, you you're planning your IT life cycle, you you're planning your IT life cycle, you have to consider when what you're using have to consider when what you're using have to consider when what you're using actually goes end of life and then have actually goes end of life and then have actually goes end of life and then have plans to upgrade and not just patch. And plans to upgrade and not just patch. And plans to upgrade and not just patch. And this is particularly true when it comes this is particularly true when it comes this is particularly true when it comes to software exploitation. to software exploitation. to software exploitation. But it's not just software by any means. But it's not just software by any means. But it's not just software by any means. And I think Mike, you mentioned that a And I think Mike, you mentioned that a And I think Mike, you mentioned that a little bit in your last presentation. little bit in your last presentation. little bit in your last presentation. Cheese there is great. Cheese there is great. Cheese there is great. Cheese is Cheese is Cheese is great. The analogy is not so great. The analogy is not so great. The analogy is not so much. Does anyone remember Spectrum much. Does anyone remember Spectrum much. Does anyone remember Spectrum Meltdown, Meltdown, Meltdown, right? It was a novel, never seen before right? It was a novel, never seen before right? It was a novel, never seen before type of vulnerability made public in type of vulnerability made public in type of vulnerability made public in early 2018. Now, Red Hat had two months early 2018. Now, Red Hat had two months early 2018. Now, Red Hat had two months to prepare, much longer than our to prepare, much longer than our to prepare, much longer than our standard two-week embargo, and we needed standard two-week embargo, and we needed standard two-week embargo, and we needed that time. CRO still has PTSD, I'm sure. that time. CRO still has PTSD, I'm sure. that time. CRO still has PTSD, I'm sure. So, do I. Uh, the cost to deliver 20 So, do I. Uh, the cost to deliver 20 So, do I. Uh, the cost to deliver 20 kernels to fix the issue was well over kernels to fix the issue was well over kernels to fix the issue was well over 8,000 people hours. We had weekly calls 8,000 people hours. We had weekly calls 8,000 people hours. We had weekly calls with Intel. We had daily calls across with Intel. We had daily calls across with Intel. We had daily calls across the organization, including support and the organization, including support and the organization, including support and legal. performance engineering was legal. performance engineering was legal. performance engineering was involved to ensure that we didn't impact involved to ensure that we didn't impact involved to ensure that we didn't impact performance too much. Now, obvious performance too much. Now, obvious performance too much. Now, obvious obviously not every vulnerability is obviously not every vulnerability is obviously not every vulnerability is this dramatic or this expensive, but all this dramatic or this expensive, but all this dramatic or this expensive, but all of this time focused on remediating of this time focused on remediating of this time focused on remediating spectrum meltdown was time that wasn't spectrum meltdown was time that wasn't spectrum meltdown was time that wasn't spent on other potentially more spent on other potentially more spent on other potentially more impactful things. impactful things. impactful things. And as an aside, while they have found And as an aside, while they have found And as an aside, while they have found weaponized exploit code to take weaponized exploit code to take weaponized exploit code to take advantage of this attack, I have not advantage of this attack, I have not advantage of this attack, I have not personally seen or heard of any evidence personally seen or heard of any evidence personally seen or heard of any evidence that anyone was ever actually exploited that anyone was ever actually exploited that anyone was ever actually exploited by it. And it took three years for the it. And it took three years for the it. And it took three years for the first fully weaponized Spectre exploit first fully weaponized Spectre exploit first fully weaponized Spectre exploit to be discovered. Now, this article was to be discovered. Now, this article was to be discovered. Now, this article was published in March of 2021 by Recorded published in March of 2021 by Recorded published in March of 2021 by Recorded Future, which is a pretty reputable Future, which is a pretty reputable Future, which is a pretty reputable source of exploit source of exploit source of exploit information. And this security information. And this security information. And this security researcher tweeted shortly after it was researcher tweeted shortly after it was researcher tweeted shortly after it was first made public in 2018 that the fix first made public in 2018 that the fix first made public in 2018 that the fix was worse than the problem. In fact, was worse than the problem. In fact, was worse than the problem. In fact, while we worked really hard to while we worked really hard to while we worked really hard to neutralize the exploitable code, the neutralize the exploitable code, the neutralize the exploitable code, the only real fix was to disable only real fix was to disable only real fix was to disable simultaneous multi-thread or SMT. And if simultaneous multi-thread or SMT. And if simultaneous multi-thread or SMT. And if you're familiar with modern CPUs, you're familiar with modern CPUs, you're familiar with modern CPUs, they're made up of multiple cores and they're made up of multiple cores and they're made up of multiple cores and threads that allow you to enable tasks threads that allow you to enable tasks threads that allow you to enable tasks that can be run in parallel, leading to that can be run in parallel, leading to that can be run in parallel, leading to faster execution, or in layman's terms, faster execution, or in layman's terms, faster execution, or in layman's terms, more threads, better performance. more threads, better performance. more threads, better performance. Turning off SMT negates all that Turning off SMT negates all that Turning off SMT negates all that benefit, and with cloud computing makes benefit, and with cloud computing makes benefit, and with cloud computing makes these tasks slower and more expensive. So, the cure is worse than expensive. So, the cure is worse than expensive. So, the cure is worse than the disease, right? Sometimes fixing a the disease, right? Sometimes fixing a the disease, right? Sometimes fixing a vulnerability will introduce a new vulnerability will introduce a new vulnerability will introduce a new vulnerability that is now unknown or vulnerability that is now unknown or vulnerability that is now unknown or creates another problem that has a more creates another problem that has a more creates another problem that has a more severe impact on your business. Uh this severe impact on your business. Uh this severe impact on your business. Uh this is no different than any other software is no different than any other software is no different than any other software update um including you know a notable update um including you know a notable update um including you know a notable issue that um struck some Windows issue that um struck some Windows issue that um struck some Windows systems last year. Uh and a more recent systems last year. Uh and a more recent systems last year. Uh and a more recent example also last year uh but iPad OS example also last year uh but iPad OS example also last year uh but iPad OS 18, right? It fixed 33 CVS. It also 18, right? It fixed 33 CVS. It also 18, right? It fixed 33 CVS. It also bricked some shiny new M4 iPad bricked some shiny new M4 iPad bricked some shiny new M4 iPad Pros. Now, I'm not saying that that Pros. Now, I'm not saying that that Pros. Now, I'm not saying that that happened because of those security happened because of those security happened because of those security fixes, but it does highlight that risk fixes, but it does highlight that risk fixes, but it does highlight that risk to any software to any software to any software changes. And this is where we have to changes. And this is where we have to changes. And this is where we have to have that honest conversation about risk have that honest conversation about risk have that honest conversation about risk because it's not just security because it's not just security because it's not just security risk. Some people went so far as to say risk. Some people went so far as to say risk. Some people went so far as to say that fully disabling SMT is the only that fully disabling SMT is the only that fully disabling SMT is the only real fix for most of these speculative real fix for most of these speculative real fix for most of these speculative execution attacks. And to do so, you execution attacks. And to do so, you execution attacks. And to do so, you would have to accept a potentially would have to accept a potentially would have to accept a potentially enormous reduction in efficiency and an enormous reduction in efficiency and an enormous reduction in efficiency and an increase in compute cost. So if we increase in compute cost. So if we increase in compute cost. So if we really truly wanted to fix all the really truly wanted to fix all the really truly wanted to fix all the things, then why did nobody disable SMT? Uh, and one other example that I SMT? Uh, and one other example that I SMT? Uh, and one other example that I think highlights what I mean about think highlights what I mean about think highlights what I mean about transparency as a strength of open transparency as a strength of open transparency as a strength of open source. So back in 2001, it was found source. So back in 2001, it was found source. So back in 2001, it was found that Borland's Interbase had a that Borland's Interbase had a that Borland's Interbase had a hard-coded user and password that was in hard-coded user and password that was in hard-coded user and password that was in the code persistently for seven years. the code persistently for seven years. the code persistently for seven years. And it was only discovered after And it was only discovered after And it was only discovered after Interbase was released as the open Interbase was released as the open Interbase was released as the open source Firebird database project. Now source Firebird database project. Now source Firebird database project. Now that vulnerability existed for seven that vulnerability existed for seven that vulnerability existed for seven years and yet no one complained about years and yet no one complained about years and yet no one complained about it. No one complained that it wasn't it. No one complained that it wasn't it. No one complained that it wasn't fixed because nobody knew about it. And fixed because nobody knew about it. And fixed because nobody knew about it. And yet as soon as it was discovered due to yet as soon as it was discovered due to yet as soon as it was discovered due to becoming open source, it was becoming open source, it was becoming open source, it was fixed. Now on one hand it was fixed fixed. Now on one hand it was fixed fixed. Now on one hand it was fixed because this is a really terrible because this is a really terrible because this is a really terrible vulnerability, right? On the other it vulnerability, right? On the other it vulnerability, right? On the other it might have existed for many more years might have existed for many more years might have existed for many more years if it wasn't for open sourc's advantage if it wasn't for open sourc's advantage if it wasn't for open sourc's advantage of transparency. So after all of this, what transparency. So after all of this, what transparency. So after all of this, what I want you to walk away with, right? I want you to walk away with, right? I want you to walk away with, right? Well, primarily that it's Well, primarily that it's Well, primarily that it's complicated. Balancing risk acceptance complicated. Balancing risk acceptance complicated. Balancing risk acceptance and mitigation will always be a and mitigation will always be a and mitigation will always be a challenge. Open source has defined challenge. Open source has defined challenge. Open source has defined accelerated development and speed to accelerated development and speed to accelerated development and speed to market. Open source is broadly accepted market. Open source is broadly accepted market. Open source is broadly accepted across all across all across all industries and yet uh we apply the same industries and yet uh we apply the same industries and yet uh we apply the same standards to open source that we do to standards to open source that we do to standards to open source that we do to proprietary software. Even though the proprietary software. Even though the proprietary software. Even though the two are very different and in some very two are very different and in some very two are very different and in some very fundamental ways, we need to treat them fundamental ways, we need to treat them fundamental ways, we need to treat them differently, especially when it comes to differently, especially when it comes to differently, especially when it comes to risk awareness and tolerance. So maybe a risk awareness and tolerance. So maybe a risk awareness and tolerance. So maybe a simple analogy will work. You're sick simple analogy will work. You're sick simple analogy will work. You're sick and you get a prescription. The doctor and you get a prescription. The doctor and you get a prescription. The doctor weighs the risk of any side effects weighs the risk of any side effects weighs the risk of any side effects against the benefit the prescription against the benefit the prescription against the benefit the prescription will bring. Most people don't pay will bring. Most people don't pay will bring. Most people don't pay attention to these side effects and just attention to these side effects and just attention to these side effects and just take the medicine as per the doctor's take the medicine as per the doctor's take the medicine as per the doctor's recommendation. recommendation. recommendation. Some will look at the side effects, uh, Some will look at the side effects, uh, Some will look at the side effects, uh, do their own research, and then usually do their own research, and then usually do their own research, and then usually take it anyways. The difference is that take it anyways. The difference is that take it anyways. The difference is that now that they they know about these now that they they know about these now that they they know about these potential side effects, and if you're potential side effects, and if you're potential side effects, and if you're like me, you tend to be a little like me, you tend to be a little like me, you tend to be a little hypervigilant, and you're looking for hypervigilant, and you're looking for hypervigilant, and you're looking for any signs of these side effects being any signs of these side effects being any signs of these side effects being realized. But more often than not, we're realized. But more often than not, we're realized. But more often than not, we're not affected by one of these side not affected by one of these side not affected by one of these side effects. Sometimes we are and we have to effects. Sometimes we are and we have to effects. Sometimes we are and we have to take other medicine or maybe a trip back take other medicine or maybe a trip back take other medicine or maybe a trip back to the doctor. But what we don't do to the doctor. But what we don't do to the doctor. But what we don't do before taking the medicine is go back to before taking the medicine is go back to before taking the medicine is go back to the doctor and ask them to get rid of the doctor and ask them to get rid of the doctor and ask them to get rid of all the side effects or provide a all the side effects or provide a all the side effects or provide a guarantee that there is a 0% chance that guarantee that there is a 0% chance that guarantee that there is a 0% chance that that side effect will materialize even that side effect will materialize even that side effect will materialize even the most minor the most minor the most minor ones. We don't ask for side effects to ones. We don't ask for side effects to ones. We don't ask for side effects to be removed when we don't know that they be removed when we don't know that they be removed when we don't know that they are there. We also don't ask for side are there. We also don't ask for side are there. We also don't ask for side effects to be removed when we do know effects to be removed when we do know effects to be removed when we do know that they are there. We do a risk that they are there. We do a risk that they are there. We do a risk calculation. The likely side effects are calculation. The likely side effects are calculation. The likely side effects are minor. We take our medicine and usually minor. We take our medicine and usually minor. We take our medicine and usually we feel better as a we feel better as a we feel better as a result. And at the end of the day, we result. And at the end of the day, we result. And at the end of the day, we have to recognize that when we use have to recognize that when we use have to recognize that when we use proprietary software, we have always proprietary software, we have always proprietary software, we have always accepted unknown risk and have been okay accepted unknown risk and have been okay accepted unknown risk and have been okay with it. with it. with it. And when open-source software became And when open-source software became And when open-source software became dominant and in many cases preferred, we dominant and in many cases preferred, we dominant and in many cases preferred, we misunderstood that we had what we had misunderstood that we had what we had misunderstood that we had what we had implicitly accepted before and decided implicitly accepted before and decided implicitly accepted before and decided that now because we knew about it, we that now because we knew about it, we that now because we knew about it, we had to fix it. Now I guarantee that the had to fix it. Now I guarantee that the had to fix it. Now I guarantee that the distribution of vulnerabilities in open distribution of vulnerabilities in open distribution of vulnerabilities in open and proprietary software is closer than and proprietary software is closer than and proprietary software is closer than what is being public publicly disclosed. what is being public publicly disclosed. what is being public publicly disclosed. Which means that there are thousands of Which means that there are thousands of Which means that there are thousands of internally known and unreported moderate internally known and unreported moderate internally known and unreported moderate and low vulnerabilities in proprietary and low vulnerabilities in proprietary and low vulnerabilities in proprietary software that we accept because we are software that we accept because we are software that we accept because we are blissfully ignorant. Even this morning I blissfully ignorant. Even this morning I blissfully ignorant. Even this morning I was reading um was reading um was reading um Microsoft bunch of fixes out today. What Microsoft bunch of fixes out today. What Microsoft bunch of fixes out today. What are they? They're all criticals and are they? They're all criticals and are they? They're all criticals and importance. Adobe more fixes out today. importance. Adobe more fixes out today. importance. Adobe more fixes out today. What are they all criticals in What are they all criticals in What are they all criticals in importance? Not one moderate or low importance? Not one moderate or low importance? Not one moderate or low amongst them. amongst them. amongst them. Interesting. So I don't think that Interesting. So I don't think that Interesting. So I don't think that governments should mandate all governments should mandate all governments should mandate all proprietary software become open source proprietary software become open source proprietary software become open source or that proprietary vendors must or that proprietary vendors must or that proprietary vendors must disclose every single bug. And yet that disclose every single bug. And yet that disclose every single bug. And yet that would on the surface uh be the only way would on the surface uh be the only way would on the surface uh be the only way to achieve a certain level of uh to achieve a certain level of uh to achieve a certain level of uh equality between the two types of equality between the two types of equality between the two types of software. software. software. Now that said, I believe that there is Now that said, I believe that there is Now that said, I believe that there is something here about equity. Proprietary something here about equity. Proprietary something here about equity. Proprietary and open both have certain advantages and open both have certain advantages and open both have certain advantages that they leverage. Yet open sourc's that they leverage. Yet open sourc's that they leverage. Yet open sourc's advantages advantages advantages um are being leveraged to disadvantage um are being leveraged to disadvantage um are being leveraged to disadvantage it. Transparency is a major advantage. it. Transparency is a major advantage. it. Transparency is a major advantage. And yet that same advantage is used to And yet that same advantage is used to And yet that same advantage is used to penalize open source communities, users, penalize open source communities, users, penalize open source communities, users, and vendors. Now open source has always and vendors. Now open source has always and vendors. Now open source has always been about empowering users. And that is been about empowering users. And that is been about empowering users. And that is no different when it comes to security. no different when it comes to security. no different when it comes to security. Transparency is power. And yet, as they Transparency is power. And yet, as they Transparency is power. And yet, as they say, with great power comes great say, with great power comes great say, with great power comes great responsibility. But that responsibility responsibility. But that responsibility responsibility. But that responsibility is on us, the end user, to accept that is on us, the end user, to accept that is on us, the end user, to accept that open source is different and its risk open source is different and its risk open source is different and its risk needs to be assessed needs to be assessed needs to be assessed differently. The software procurement differently. The software procurement differently. The software procurement rules changed quite a while ago and the rules changed quite a while ago and the rules changed quite a while ago and the software security assessment rules need software security assessment rules need software security assessment rules need to catch up. to catch up. to catch up. And that's what I got. So, I think we And that's what I got. So, I think we And that's what I got. So, I think we have a lot of time for questions. There's got to be some questions. There's got to be some questions. There's got to be some there's some contentious stuff in here. there's some contentious stuff in here. there's some contentious stuff in here. Oh, there's some in Discord. Great. So, Oh, there's some in Discord. Great. So, Oh, there's some in Discord. Great. So, there was there was at least a question there was there was at least a question there was there was at least a question in Discord. Uh when you say low in Discord. Uh when you say low in Discord. Uh when you say low vulnerabilities as regular bugs, how do vulnerabilities as regular bugs, how do vulnerabilities as regular bugs, how do you account for attackers stitching you account for attackers stitching you account for attackers stitching together multiple medium/ low together multiple medium/ low together multiple medium/ low vulnerabilities to cause breach as vulnerabilities to cause breach as vulnerabilities to cause breach as effectively as a single critical effectively as a single critical effectively as a single critical vulnerability? vulnerability? vulnerability? Um I mean you can't necessarily say that Um I mean you can't necessarily say that Um I mean you can't necessarily say that they're all irrelevant. They uh like they're all irrelevant. They uh like they're all irrelevant. They uh like vulnerability chaining is a real thing, vulnerability chaining is a real thing, vulnerability chaining is a real thing, but at the end of that chain you but at the end of that chain you but at the end of that chain you actually need something to give you that actually need something to give you that actually need something to give you that elevated privilege. Like if I'm elevated privilege. Like if I'm elevated privilege. Like if I'm exploiting a bunch of lows to wander my exploiting a bunch of lows to wander my exploiting a bunch of lows to wander my way through an environment or whatnot, way through an environment or whatnot, way through an environment or whatnot, you know, hopping from place to place you know, hopping from place to place you know, hopping from place to place kind of thing, at the end of the day, I kind of thing, at the end of the day, I kind of thing, at the end of the day, I still need a important vulnerability or still need a important vulnerability or still need a important vulnerability or something a little bit more meaningful something a little bit more meaningful something a little bit more meaningful to actually get what it is that I'm to actually get what it is that I'm to actually get what it is that I'm after. So I can exploit a bunch of stuff after. So I can exploit a bunch of stuff after. So I can exploit a bunch of stuff and just end up somewhere else and still and just end up somewhere else and still and just end up somewhere else and still not get anything meaningful out of it. not get anything meaningful out of it. not get anything meaningful out of it. uh those I've not heard of a single uh those I've not heard of a single uh those I've not heard of a single breach based only on vulnerability breach based only on vulnerability breach based only on vulnerability chaining of moderates and lows that chaining of moderates and lows that chaining of moderates and lows that didn't have some other misconfiguration didn't have some other misconfiguration didn't have some other misconfiguration or something else in them. Right? So or something else in them. Right? So or something else in them. Right? So that's kind of the way I mean I I look that's kind of the way I mean I I look that's kind of the way I mean I I look at it as misconfigurations are probably at it as misconfigurations are probably at it as misconfigurations are probably the the the most damaging and important thing to be most damaging and important thing to be most damaging and important thing to be paying attention to above and beyond paying attention to above and beyond paying attention to above and beyond vulnerabilities with the exception of vulnerabilities with the exception of vulnerabilities with the exception of those that are known to be actively those that are known to be actively those that are known to be actively exploited and those criticals and exploited and those criticals and exploited and those criticals and importance that are easy to exploit and importance that are easy to exploit and importance that are easy to exploit and get you like the maximum amount for your get you like the maximum amount for your get you like the maximum amount for your effort. So hopefully that answers the effort. So hopefully that answers the effort. So hopefully that answers the question. Yes, question. Yes, question. Yes, just wanted to say thank you for the just wanted to say thank you for the just wanted to say thank you for the presentation. I've been told I'm a Linux presentation. I've been told I'm a Linux presentation. I've been told I'm a Linux diva. Um, I really appreciate all the diva. Um, I really appreciate all the diva. Um, I really appreciate all the open source contributions. So, I'm gonna open source contributions. So, I'm gonna open source contributions. So, I'm gonna stand up here. Yeah, I just to play a devil's advocate Yeah, I just to play a devil's advocate Yeah, I just to play a devil's advocate though with the analogy. I know though with the analogy. I know though with the analogy. I know analogies are never perfect but um you analogies are never perfect but um you analogies are never perfect but um you know one thing I kind of noted was it's know one thing I kind of noted was it's know one thing I kind of noted was it's kind of missing the adversarial aspect kind of missing the adversarial aspect kind of missing the adversarial aspect and you know show the data points you and you know show the data points you and you know show the data points you showed kind of proof that maybe it's a showed kind of proof that maybe it's a showed kind of proof that maybe it's a minor um you know consideration to try minor um you know consideration to try minor um you know consideration to try to include but just kind of wondering um to include but just kind of wondering um to include but just kind of wondering um you know to that point is there any um I you know to that point is there any um I you know to that point is there any um I guess equitable way to look at like guess equitable way to look at like guess equitable way to look at like disclosures and open source and I guess disclosures and open source and I guess disclosures and open source and I guess the visibility ility when you know the visibility ility when you know the visibility ility when you know attackers can kind of have that insight attackers can kind of have that insight attackers can kind of have that insight as well. Yeah, I mean that is um that is as well. Yeah, I mean that is um that is as well. Yeah, I mean that is um that is one disadvantage of uh the transparency one disadvantage of uh the transparency one disadvantage of uh the transparency that open source provides is that that open source provides is that that open source provides is that attackers can look at that that attackers can look at that that attackers can look at that that vulnerability data but I think if we vulnerability data but I think if we vulnerability data but I think if we look back and we've been tracking uh look back and we've been tracking uh look back and we've been tracking uh exploitation against at least the exploitation against at least the exploitation against at least the software that Red Hat ships um over the software that Red Hat ships um over the software that Red Hat ships um over the past number of years and the past number of years and the past number of years and the exploitation rates continue to be really exploitation rates continue to be really exploitation rates continue to be really low, right? Um and so that tells me a low, right? Um and so that tells me a low, right? Um and so that tells me a few things. It tells me that I mean for few things. It tells me that I mean for few things. It tells me that I mean for one if you're looking at like how do I one if you're looking at like how do I one if you're looking at like how do I prevent a nation state from attacking me prevent a nation state from attacking me prevent a nation state from attacking me like like like sorry these these some of these sorry these these some of these sorry these these some of these countries have more money than God so countries have more money than God so countries have more money than God so maybe it doesn't matter right like maybe it doesn't matter right like maybe it doesn't matter right like nothing that you do is going to stop nothing that you do is going to stop nothing that you do is going to stop them if they're determined so we got to them if they're determined so we got to them if they're determined so we got to take that one off the table right uh take that one off the table right uh take that one off the table right uh when it comes to the rest they're going when it comes to the rest they're going when it comes to the rest they're going to be looking for the return on to be looking for the return on to be looking for the return on investment like if I am going to launch investment like if I am going to launch investment like if I am going to launch a campaign I am looking a campaign I am looking a campaign I am looking for that higher payoff right so if I can for that higher payoff right so if I can for that higher payoff right so if I can do that through compromis compromising a do that through compromis compromising a do that through compromis compromising a person through social engineering. That person through social engineering. That person through social engineering. That is going to be less costly for me than is going to be less costly for me than is going to be less costly for me than it is trying to figure out how to chain it is trying to figure out how to chain it is trying to figure out how to chain a bunch of exploits together or not a a bunch of exploits together or not a a bunch of exploits together or not a bunch of exploits, a bunch of bunch of exploits, a bunch of bunch of exploits, a bunch of vulnerabilities together to get that, vulnerabilities together to get that, vulnerabilities together to get that, you know, get past all of these you know, get past all of these you know, get past all of these protections. If I just have to go and protections. If I just have to go and protections. If I just have to go and trick Sally into clicking something trick Sally into clicking something trick Sally into clicking something rather than do all of this work, man, rather than do all of this work, man, rather than do all of this work, man, I'm going to try to trick Sally every I'm going to try to trick Sally every I'm going to try to trick Sally every day of the week, right? So, thank you. day of the week, right? So, thank you. day of the week, right? So, thank you. Yep. That was a good question. Thank Yep. That was a good question. Thank Yep. That was a good question. Thank you. you. you. Hi. Um, my question, you briefly Hi. Um, my question, you briefly Hi. Um, my question, you briefly mentioned risk assess, risk assessments. mentioned risk assess, risk assessments. mentioned risk assess, risk assessments. One of my needs is to be able to develop One of my needs is to be able to develop One of my needs is to be able to develop a risk assessment that helps me talk to a risk assessment that helps me talk to a risk assessment that helps me talk to the person that says, well, this version the person that says, well, this version the person that says, well, this version is vulnerable. Tell your developer to is vulnerable. Tell your developer to is vulnerable. Tell your developer to update this version. and the developer update this version. and the developer update this version. and the developer group that says okay yeah but my group that says okay yeah but my group that says okay yeah but my configuration of this version is not you configuration of this version is not you configuration of this version is not you know is not exploitable so I don't need know is not exploitable so I don't need know is not exploitable so I don't need to do that but there's no I I I'm to do that but there's no I I I'm to do that but there's no I I I'm looking for a risk assessment that can looking for a risk assessment that can looking for a risk assessment that can help me explain that to these two yeah help me explain that to these two yeah help me explain that to these two yeah that's hard because I don't think a lot that's hard because I don't think a lot that's hard because I don't think a lot of the uh risk assessment of the uh risk assessment of the uh risk assessment frameworks are being properly utilized frameworks are being properly utilized frameworks are being properly utilized because I think that there are there is because I think that there are there is because I think that there are there is latitude in being able to explain these latitude in being able to explain these latitude in being able to explain these things. You just have to explain it in a things. You just have to explain it in a things. You just have to explain it in a way that they understand, right? Um as way that they understand, right? Um as way that they understand, right? Um as one example, one example, one example, uh recently I had uh a pen test that I uh recently I had uh a pen test that I uh recently I had uh a pen test that I haven't actually seen, so I think it's haven't actually seen, so I think it's haven't actually seen, so I think it's just like an SCA scan, right, of a um of just like an SCA scan, right, of a um of just like an SCA scan, right, of a um of a product that included a vulnerable a product that included a vulnerable a product that included a vulnerable version vulnerable to a low CVE of version vulnerable to a low CVE of version vulnerable to a low CVE of moment.js, JS, which is a date parsing moment.js, JS, which is a date parsing moment.js, JS, which is a date parsing JavaScript library, right? JavaScript library, right? JavaScript library, right? Um, customer was insistent that we Um, customer was insistent that we Um, customer was insistent that we upgrade it because the pen test showed upgrade it because the pen test showed upgrade it because the pen test showed it was an older version of this thing. it was an older version of this thing. it was an older version of this thing. And I'm like, unless you are actually And I'm like, unless you are actually And I'm like, unless you are actually manipulating or or accepting untrusted manipulating or or accepting untrusted manipulating or or accepting untrusted input from a user that you're thinking input from a user that you're thinking input from a user that you're thinking is a date string, like it doesn't even is a date string, like it doesn't even is a date string, like it doesn't even matter. Like but on the flip side maybe matter. Like but on the flip side maybe matter. Like but on the flip side maybe something changed upstream in there something changed upstream in there something changed upstream in there because upstream you know unlike a lot because upstream you know unlike a lot because upstream you know unlike a lot of maybe vendors who are like you know of maybe vendors who are like you know of maybe vendors who are like you know stability is important we're not going stability is important we're not going stability is important we're not going to change things on you so that the to change things on you so that the to change things on you so that the application you're running today is application you're running today is application you're running today is going to be the same application you can going to be the same application you can going to be the same application you can run in five years because we're not run in five years because we're not run in five years because we're not changing anything but now we start changing anything but now we start changing anything but now we start changing things and those applications changing things and those applications changing things and those applications start to break right and that's what I start to break right and that's what I start to break right and that's what I mean when I say the risk of a code mean when I say the risk of a code mean when I say the risk of a code change for something low, right? It's change for something low, right? It's change for something low, right? It's not just that there might be a new not just that there might be a new not just that there might be a new unknown worse vulnerability that shows unknown worse vulnerability that shows unknown worse vulnerability that shows up, right? Because I mean, some of Red up, right? Because I mean, some of Red up, right? Because I mean, some of Red Hat software, at least in re is a little Hat software, at least in re is a little Hat software, at least in re is a little long in the tooth. It's pretty old, long in the tooth. It's pretty old, long in the tooth. It's pretty old, right? When you have a 10-year life right? When you have a 10-year life right? When you have a 10-year life cycle, it has been proven that there are cycle, it has been proven that there are cycle, it has been proven that there are vulnerabilities that get introduced vulnerabilities that get introduced vulnerabilities that get introduced later than that. So, we have a number of later than that. So, we have a number of later than that. So, we have a number of customers who avoid even any kind of customers who avoid even any kind of customers who avoid even any kind of exposure to a CV because the software is exposure to a CV because the software is exposure to a CV because the software is older than that. So I I posit that the older than that. So I I posit that the older than that. So I I posit that the longer you go, the more secure this is longer you go, the more secure this is longer you go, the more secure this is because you're minimizing the changes because you're minimizing the changes because you're minimizing the changes too. But if we grab the latest version too. But if we grab the latest version too. But if we grab the latest version all the time, then our customers would all the time, then our customers would all the time, then our customers would be vulnerable to all of those things. be vulnerable to all of those things. be vulnerable to all of those things. And not only And not only And not only that, the applications that the customer that, the applications that the customer that, the applications that the customer is deploying on that might stop working. is deploying on that might stop working. is deploying on that might stop working. Like as one example, I wrote um for Like as one example, I wrote um for Like as one example, I wrote um for myself a blog platform in Python. I myself a blog platform in Python. I myself a blog platform in Python. I don't have a lot of time to do a lot of don't have a lot of time to do a lot of don't have a lot of time to do a lot of development. So usually Christmas every development. So usually Christmas every development. So usually Christmas every year I'm like man I should do like a pip year I'm like man I should do like a pip year I'm like man I should do like a pip upgrade to upgrade my dependencies and upgrade to upgrade my dependencies and upgrade to upgrade my dependencies and then that's fast takes me a couple then that's fast takes me a couple then that's fast takes me a couple minutes and then like the rest of the minutes and then like the rest of the minutes and then like the rest of the day I spend fixing my code that now day I spend fixing my code that now day I spend fixing my code that now broke because all these dependencies broke because all these dependencies broke because all these dependencies changed something right so code change changed something right so code change changed something right so code change introduces risk that may not necessarily introduces risk that may not necessarily introduces risk that may not necessarily be security risk but it dem you know I be security risk but it dem you know I be security risk but it dem you know I had I mean it's my blog so I don't care had I mean it's my blog so I don't care had I mean it's my blog so I don't care but I was I had downtime and I was but I was I had downtime and I was but I was I had downtime and I was frustrated and I wasted Christmas doing frustrated and I wasted Christmas doing frustrated and I wasted Christmas doing it right like there's there's a risk to it right like there's there's a risk to it right like there's there's a risk to nice hand sanity I guess. Uh but all of nice hand sanity I guess. Uh but all of nice hand sanity I guess. Uh but all of these changes are there. So I think that these changes are there. So I think that these changes are there. So I think that if you can convey that as a way of like if you can convey that as a way of like if you can convey that as a way of like the risk isn't the risk isn't the risk isn't just scary security thing over here but just scary security thing over here but just scary security thing over here but it's like risk to business, risk to it's like risk to business, risk to it's like risk to business, risk to things breaking, risk to downtime, risk things breaking, risk to downtime, risk things breaking, risk to downtime, risk to whatever. Um then you actually start to whatever. Um then you actually start to whatever. Um then you actually start talking about risk in its totality talking about risk in its totality talking about risk in its totality rather than just risk from a very small rather than just risk from a very small rather than just risk from a very small minute security perspective. minute security perspective. minute security perspective. I would actually add to that that I would actually add to that that I would actually add to that that downtime is also a security risk, right? downtime is also a security risk, right? downtime is also a security risk, right? 100%. Yep. 100%. Security. Um I actually 100%. Yep. 100%. Security. Um I actually 100%. Yep. 100%. Security. Um I actually had a question. Um, I was wondering what had a question. Um, I was wondering what had a question. Um, I was wondering what you if you think that proprietary you if you think that proprietary you if you think that proprietary software doesn't have or doesn't report software doesn't have or doesn't report software doesn't have or doesn't report as many low and moderate vulnerabilities as many low and moderate vulnerabilities as many low and moderate vulnerabilities because they're not being discovered or because they're not being discovered or because they're not being discovered or or or or because well they're being known but because well they're being known but because well they're being known but they're just being ignored. they're just being ignored. they're just being ignored. So I'm speculating, right? Because I've So I'm speculating, right? Because I've So I'm speculating, right? Because I've I've actually never worked for a I've actually never worked for a I've actually never worked for a proprietary software company. So I have proprietary software company. So I have proprietary software company. So I have no idea what goes on on the other side. no idea what goes on on the other side. no idea what goes on on the other side. That's the opakeness that's there, That's the opakeness that's there, That's the opakeness that's there, right? right? right? What I do think is What I do think is What I do think is that given the large volume of moderates that given the large volume of moderates that given the large volume of moderates and lows that we see in open source, and lows that we see in open source, and lows that we see in open source, relatively minor vulnerabilities, like relatively minor vulnerabilities, like relatively minor vulnerabilities, like you can't tell me that all of these you can't tell me that all of these you can't tell me that all of these proprietary vendors have very terrible proprietary vendors have very terrible proprietary vendors have very terrible developers who make astronomically huge developers who make astronomically huge developers who make astronomically huge security issues all the time just security issues all the time just security issues all the time just because they don't know how to make less because they don't know how to make less because they don't know how to make less impactful security bugs. Like it just it impactful security bugs. Like it just it impactful security bugs. Like it just it feels like a statistical anomaly. And so feels like a statistical anomaly. And so feels like a statistical anomaly. And so if we if we believe that some of these if we if we believe that some of these if we if we believe that some of these low security issues that I would say are low security issues that I would say are low security issues that I would say are you know bugs show up in proprietary you know bugs show up in proprietary you know bugs show up in proprietary software as well because developers are software as well because developers are software as well because developers are developers and maybe we're all you developers and maybe we're all you developers and maybe we're all you know similar skill set or whatever right know similar skill set or whatever right know similar skill set or whatever right at least on average. Um they have to be at least on average. Um they have to be at least on average. Um they have to be there. So either they're not looking for there. So either they're not looking for there. So either they're not looking for them or they look for them and fix them them or they look for them and fix them them or they look for them and fix them silently which is totally possible. They silently which is totally possible. They silently which is totally possible. They could do that right? um or they just could do that right? um or they just could do that right? um or they just don't they don't care, right? I know I I don't they don't care, right? I know I I don't they don't care, right? I know I I was talking to somebody I think it was was talking to somebody I think it was was talking to somebody I think it was at um Sauce Fusion last year. Uh we were at um Sauce Fusion last year. Uh we were at um Sauce Fusion last year. Uh we were talking about a security vendor like talking about a security vendor like talking about a security vendor like they sell security products and the CEO they sell security products and the CEO they sell security products and the CEO basically said we will never have a CVE basically said we will never have a CVE basically said we will never have a CVE ever for our ever for our ever for our product. They had security issues. They product. They had security issues. They product. They had security issues. They fixed security issues. They never fixed security issues. They never fixed security issues. They never publicly disclose them because we're a publicly disclose them because we're a publicly disclose them because we're a security company and it would tarnish security company and it would tarnish security company and it would tarnish our reputation if we had security fixes our reputation if we had security fixes our reputation if we had security fixes in our own security product. Maybe the in our own security product. Maybe the in our own security product. Maybe the low and moderate are actually because low and moderate are actually because low and moderate are actually because they're hard to exploit. Maybe they're they're hard to exploit. Maybe they're they're hard to exploit. Maybe they're actually not being actually not being actually not being discovered either. Uh it's very possible discovered either. Uh it's very possible discovered either. Uh it's very possible like if they don't again like whatever like if they don't again like whatever like if they don't again like whatever their SDL may or may not look like I their SDL may or may not look like I their SDL may or may not look like I don't know. So they may not be looking don't know. So they may not be looking don't know. So they may not be looking for them but they are they are present. for them but they are they are present. for them but they are they are present. uh some of which because you know uh some of which because you know uh some of which because you know they're in open source like well-known they're in open source like well-known they're in open source like well-known open source components and if we go to open source components and if we go to open source components and if we go to 97% of these code bases have some open 97% of these code bases have some open 97% of these code bases have some open source then I guarantee you there's some source then I guarantee you there's some source then I guarantee you there's some moderate slows that are in there. Um, moderate slows that are in there. Um, moderate slows that are in there. Um, but then on the on the flip side, right, but then on the on the flip side, right, but then on the on the flip side, right, like when we're looking at all of these like when we're looking at all of these like when we're looking at all of these things, uh, they could just simply not things, uh, they could just simply not things, uh, they could just simply not be disclosing them because they don't be disclosing them because they don't be disclosing them because they don't want their CV counts to be want their CV counts to be want their CV counts to be high, right? Like there are there are a high, right? Like there are there are a high, right? Like there are there are a lot of reasons behind that and I I can't lot of reasons behind that and I I can't lot of reasons behind that and I I can't profess to know what they are. Like I profess to know what they are. Like I profess to know what they are. Like I can only speculate um because I've never can only speculate um because I've never can only speculate um because I've never worked in that environment, right? But worked in that environment, right? But worked in that environment, right? But it's a good question. Thank you. So it's a good question. Thank you. So it's a good question. Thank you. So another question from Discord. How would another question from Discord. How would another question from Discord. How would you encourage low/medium security bug you encourage low/medium security bug you encourage low/medium security bug reporting by developers? Uh, do we need reporting by developers? Uh, do we need reporting by developers? Uh, do we need more sticks or more carrots? Sorry, can more sticks or more carrots? Sorry, can more sticks or more carrots? Sorry, can you repeat that again? Uh, how would you you repeat that again? Uh, how would you you repeat that again? Uh, how would you encourage low/medium security bug encourage low/medium security bug encourage low/medium security bug reporting by developers? reporting by developers? reporting by developers? How would I encourage it? Yeah. Oh, How would I encourage it? Yeah. Oh, How would I encourage it? Yeah. Oh, encourage them to fix it. Well, I think encourage them to fix it. Well, I think encourage them to fix it. Well, I think like open source communities upstreams, like open source communities upstreams, like open source communities upstreams, they they do they do fix them, right? they they do they do fix them, right? they they do they do fix them, right? Like I don't think there's any open Like I don't think there's any open Like I don't think there's any open source prizes like me, I don't care. source prizes like me, I don't care. source prizes like me, I don't care. we'll just leave those things there we'll just leave those things there we'll just leave those things there forever. They may dispute it as being forever. They may dispute it as being forever. They may dispute it as being security relevant, right? But they they security relevant, right? But they they security relevant, right? But they they tend to fix them. It's the downstream tend to fix them. It's the downstream tend to fix them. It's the downstream use of that. So, I mean, I'll I'll pick use of that. So, I mean, I'll I'll pick use of that. So, I mean, I'll I'll pick on Red Hat. We don't fix all the on Red Hat. We don't fix all the on Red Hat. We don't fix all the moderates and lowest because we don't moderates and lowest because we don't moderates and lowest because we don't grab all the latest versions from grab all the latest versions from grab all the latest versions from upstream. And we know that could um upstream. And we know that could um upstream. And we know that could um negatively impact a customer negatively impact a customer negatively impact a customer environment. A lot of people who are environment. A lot of people who are environment. A lot of people who are pulling directly from upstream and may pulling directly from upstream and may pulling directly from upstream and may not want to use that later version for a not want to use that later version for a not want to use that later version for a variety of reasons may elect not to. So, variety of reasons may elect not to. So, variety of reasons may elect not to. So, it's not that uh developers are not it's not that uh developers are not it's not that uh developers are not incentivized to fix them. I believe open incentivized to fix them. I believe open incentivized to fix them. I believe open source maintainers do really good and source maintainers do really good and source maintainers do really good and care and fix these things, but do we care and fix these things, but do we care and fix these things, but do we need to pull in all of those fixes every need to pull in all of those fixes every need to pull in all of those fixes every single time? Maybe not, because at the single time? Maybe not, because at the single time? Maybe not, because at the same time, they're adding all the new same time, they're adding all the new same time, they're adding all the new features and things that, you know, that features and things that, you know, that features and things that, you know, that excite them about their project, right? excite them about their project, right? excite them about their project, right? So, I just want to say that I think that So, I just want to say that I think that So, I just want to say that I think that everybody in the room will agree with everybody in the room will agree with everybody in the room will agree with you. We should not be using end of life you. We should not be using end of life you. We should not be using end of life software. um everybody here nobody does software. um everybody here nobody does software. um everybody here nobody does especially not my company we don't have especially not my company we don't have especially not my company we don't have any rail six anywhere in our environment any rail six anywhere in our environment any rail six anywhere in our environment but outside of this room I think we can but outside of this room I think we can but outside of this room I think we can all agree that there are some some all agree that there are some some all agree that there are some some applications that only run on rail six applications that only run on rail six applications that only run on rail six or four or five and the business has or four or five and the business has or four or five and the business has been relying on them they're the been relying on them they're the been relying on them they're the business critical applications business critical applications business critical applications for reasons why they haven't been for reasons why they haven't been for reasons why they haven't been upgraded above my pay grade the question upgraded above my pay grade the question upgraded above my pay grade the question really boils down to when the business really boils down to when the business really boils down to when the business does have that necessity we do need R does have that necessity we do need R does have that necessity we do need R for for whatever reason because this for for whatever reason because this for for whatever reason because this application what is the solution because application what is the solution because application what is the solution because the business needs have to come first the business needs have to come first the business needs have to come first and when it comes to a patch that is and when it comes to a patch that is and when it comes to a patch that is exploitable on well four what should we exploitable on well four what should we exploitable on well four what should we be doing that's where you build your you be doing that's where you build your you be doing that's where you build your you got to build your moat around those got to build your moat around those got to build your moat around those systems right you have to put every systems right you have to put every systems right you have to put every mitigation compensating control every mitigation compensating control every mitigation compensating control every technology that keeps that thing from technology that keeps that thing from technology that keeps that thing from being accessible to an attacker you have being accessible to an attacker you have being accessible to an attacker you have to do that Then now you're you have to to do that Then now you're you have to to do that Then now you're you have to weigh your own risk, right? Is it the weigh your own risk, right? Is it the weigh your own risk, right? Is it the risk of exploitation or is it the risk risk of exploitation or is it the risk risk of exploitation or is it the risk of I have to now spend a bunch of money of I have to now spend a bunch of money of I have to now spend a bunch of money to upgrade an application or buy to upgrade an application or buy to upgrade an application or buy something else, do a migration, all of something else, do a migration, all of something else, do a migration, all of these like either one is risk, right? So these like either one is risk, right? So these like either one is risk, right? So one is like we accept that risk, we know one is like we accept that risk, we know one is like we accept that risk, we know about it, we can pay attention to things about it, we can pay attention to things about it, we can pay attention to things that may or may not affect it and we can that may or may not affect it and we can that may or may not affect it and we can build compensating controls around that build compensating controls around that build compensating controls around that to protect it as much as possible. But to protect it as much as possible. But to protect it as much as possible. But we accept that the risk of this being we accept that the risk of this being we accept that the risk of this being exploited is less than the risk of exploited is less than the risk of exploited is less than the risk of having to do this costly, expensive, having to do this costly, expensive, having to do this costly, expensive, difficult, maybe impossible migration. difficult, maybe impossible migration. difficult, maybe impossible migration. And I mean that's a business decision. And I mean that's a business decision. And I mean that's a business decision. Agree 100%. Second question is I know Agree 100%. Second question is I know Agree 100%. Second question is I know you mentioned that only like 26% of all you mentioned that only like 26% of all you mentioned that only like 26% of all CVES and Red Hat were exploited CVES and Red Hat were exploited CVES and Red Hat were exploited something to that. something to that. something to that. I agree with you, but you you only know I agree with you, but you you only know I agree with you, but you you only know of 26. Just going by the same example of of 26. Just going by the same example of of 26. Just going by the same example of proprietary vulnerabilities, we don't proprietary vulnerabilities, we don't proprietary vulnerabilities, we don't always know. Hey, maybe there is one always know. Hey, maybe there is one always know. Hey, maybe there is one that it's not openly available. Maybe that it's not openly available. Maybe that it's not openly available. Maybe some nation state does have it, some some nation state does have it, some some nation state does have it, some ransomware gang does have it, and ransomware gang does have it, and ransomware gang does have it, and they're going to try to take advantage they're going to try to take advantage they're going to try to take advantage of it. So, while I do agree with you, of it. So, while I do agree with you, of it. So, while I do agree with you, yes, very few vulnerabilities are yes, very few vulnerabilities are yes, very few vulnerabilities are actually actively exploited by script actually actively exploited by script actually actively exploited by script kitties, it kind of becomes a very naive kitties, it kind of becomes a very naive kitties, it kind of becomes a very naive look saying, well, we only need to worry look saying, well, we only need to worry look saying, well, we only need to worry about the ones that are being exploited about the ones that are being exploited about the ones that are being exploited because just because you don't know that because just because you don't know that because just because you don't know that they're being exploited doesn't mean they're being exploited doesn't mean they're being exploited doesn't mean somebody cannot exploit that and somebody cannot exploit that and somebody cannot exploit that and compromise your system. Right. But we compromise your system. Right. But we compromise your system. Right. But we don't just fix vulnerabilities that we don't just fix vulnerabilities that we don't just fix vulnerabilities that we know are exploited. No. Right. So we know are exploited. No. Right. So we know are exploited. No. Right. So we proactively fix the criticals and proactively fix the criticals and proactively fix the criticals and importance because those are the ones importance because those are the ones importance because those are the ones easy to exploit and uh high impact or easy to exploit and uh high impact or easy to exploit and uh high impact or high yield if they are exploited right high yield if they are exploited right high yield if they are exploited right where we sit there and we go we're where we sit there and we go we're where we sit there and we go we're actually introducing more to to your actually introducing more to to your actually introducing more to to your earlier question right we're actually earlier question right we're actually earlier question right we're actually introducing more risk into a customer introducing more risk into a customer introducing more risk into a customer environment by making a code change for environment by making a code change for environment by making a code change for something that if it were something that if it were something that if it were exploited minimal consequences right so exploited minimal consequences right so exploited minimal consequences right so again we're doing that risk balance again we're doing that risk balance again we're doing that risk balance we'll fix the criticals the importance we'll fix the criticals the importance we'll fix the criticals the importance and if we see one of these other ones and if we see one of these other ones and if we see one of these other ones that we elected not to fix. If it starts that we elected not to fix. If it starts that we elected not to fix. If it starts to become actively exploited, we're to become actively exploited, we're to become actively exploited, we're going to treat it like it was a critical going to treat it like it was a critical going to treat it like it was a critical and fix it right away. So, we're we're and fix it right away. So, we're we're and fix it right away. So, we're we're absolutely taking the risk avoidance absolutely taking the risk avoidance absolutely taking the risk avoidance approach, but in balance because if we approach, but in balance because if we approach, but in balance because if we release fixes, um shell shock is a release fixes, um shell shock is a release fixes, um shell shock is a perfect example, right? First, first fix perfect example, right? First, first fix perfect example, right? First, first fix for shell shock didn't work. There had for shell shock didn't work. There had for shell shock didn't work. There had to be a second fix for shell shock to be a second fix for shell shock to be a second fix for shell shock didn't work. Had to be a third fix for didn't work. Had to be a third fix for didn't work. Had to be a third fix for shell shock. But with Red Hat, we fixed shell shock. But with Red Hat, we fixed shell shock. But with Red Hat, we fixed it once, the original CV, not the fix of it once, the original CV, not the fix of it once, the original CV, not the fix of the CV that was broken or the fix of the the CV that was broken or the fix of the the CV that was broken or the fix of the fix that was broken because we tested fix that was broken because we tested fix that was broken because we tested it. We, you know, we did all of our it. We, you know, we did all of our it. We, you know, we did all of our enterprisy stuff to it to make sure that enterprisy stuff to it to make sure that enterprisy stuff to it to make sure that it was good for a end user to use. So, it was good for a end user to use. So, it was good for a end user to use. So, we're balancing that risk of like what we're balancing that risk of like what we're balancing that risk of like what do we introduce into your environment do we introduce into your environment do we introduce into your environment versus the guarantees that we made when versus the guarantees that we made when versus the guarantees that we made when you purchase the software for stability you purchase the software for stability you purchase the software for stability and like API ABI compatibility and like API ABI compatibility and like API ABI compatibility guarantees. Yeah. And and again, guarantees. Yeah. And and again, guarantees. Yeah. And and again, everybody who uses Microsoft knows that everybody who uses Microsoft knows that everybody who uses Microsoft knows that they have zero bugs in Microsoft, they have zero bugs in Microsoft, they have zero bugs in Microsoft, nothing in Windows at all. That's why nothing in Windows at all. That's why nothing in Windows at all. That's why the developers are great. But that is the developers are great. But that is the developers are great. But that is always the concern of agreed, we need to always the concern of agreed, we need to always the concern of agreed, we need to test it. We need to make sure we don't test it. We need to make sure we don't test it. We need to make sure we don't break stuff. And and again, this is why break stuff. And and again, this is why break stuff. And and again, this is why we always say we should be testing in we always say we should be testing in we always say we should be testing in non-production. People should not be non-production. People should not be non-production. People should not be testing new fixes in production. And testing new fixes in production. And testing new fixes in production. And again, nobody in this room will do that again, nobody in this room will do that again, nobody in this room will do that elsewhere. Agreed. until you have those elsewhere. Agreed. until you have those elsewhere. Agreed. until you have those fixes pushed on you unwittingly and then fixes pushed on you unwittingly and then fixes pushed on you unwittingly and then you know airports can't display you know airports can't display you know airports can't display information right yes thank you probably information right yes thank you probably information right yes thank you probably the final question it's also from the final question it's also from the final question it's also from Discord most compliance requirements are Discord most compliance requirements are Discord most compliance requirements are pretty much black and white in terms of pretty much black and white in terms of pretty much black and white in terms of fixing Cvees and not driven by risk uh fixing Cvees and not driven by risk uh fixing Cvees and not driven by risk uh considering it's very hard uh considering it's very hard uh considering it's very hard uh impractical to do CVE risk assessment at impractical to do CVE risk assessment at impractical to do CVE risk assessment at scale only option is fixing the CVE or scale only option is fixing the CVE or scale only option is fixing the CVE or getting rid of the dependency to meet getting rid of the dependency to meet getting rid of the dependency to meet the compliance requirement. So the the compliance requirement. So the the compliance requirement. So the question is what do you propose as a question is what do you propose as a question is what do you propose as a fair and sensible solution here? fair and sensible solution here? fair and sensible solution here? Well, I I don't think compliance Well, I I don't think compliance Well, I I don't think compliance requirements are black and white, right? requirements are black and white, right? requirements are black and white, right? A lot of it is how it is interpreted. A lot of it is how it is interpreted. A lot of it is how it is interpreted. And so if I look at something like And so if I look at something like And so if I look at something like um you know Fed ramp, PCI, whatever it um you know Fed ramp, PCI, whatever it um you know Fed ramp, PCI, whatever it is, right? It will say use a is, right? It will say use a is, right? It will say use a riskmanagement voodoo, but they don't riskmanagement voodoo, but they don't riskmanagement voodoo, but they don't define what the voodoo is, right? In define what the voodoo is, right? In define what the voodoo is, right? In fact, uh PCI is funny because in one fact, uh PCI is funny because in one fact, uh PCI is funny because in one section it says use risk assessment uh section it says use risk assessment uh section it says use risk assessment uh capabilities or whatever the word is capabilities or whatever the word is capabilities or whatever the word is like like like CVSS. So it's not saying there use CVS, CVSS. So it's not saying there use CVS, CVSS. So it's not saying there use CVS, it says like CVS, a way of rating it says like CVS, a way of rating it says like CVS, a way of rating vulnerabilities. And then further like vulnerabilities. And then further like vulnerabilities. And then further like 50 pages later in the document, it says 50 pages later in the document, it says 50 pages later in the document, it says fix CVSS scores four and above. Well, fix CVSS scores four and above. Well, fix CVSS scores four and above. Well, which one is it? Right? Do I use which one is it? Right? Do I use which one is it? Right? Do I use something like CVSS or do I have to fix something like CVSS or do I have to fix something like CVSS or do I have to fix every four and above? A lot of the every four and above? A lot of the every four and above? A lot of the um compliance um compliance um compliance interpretation is done within uh a interpretation is done within uh a interpretation is done within uh a company company company itself, right? So it's like I in my itself, right? So it's like I in my itself, right? So it's like I in my company get to decide how I'm going to company get to decide how I'm going to company get to decide how I'm going to meet with my interpretation of this meet with my interpretation of this meet with my interpretation of this compliance requirement and usually when compliance requirement and usually when compliance requirement and usually when we have excuse me compliance and we have excuse me compliance and we have excuse me compliance and auditors and whatnot, they're usually auditors and whatnot, they're usually auditors and whatnot, they're usually internal auditors auditing against their internal auditors auditing against their internal auditors auditing against their internal standards. internal standards. internal standards. The question really is why did the The question really is why did the The question really is why did the company choose that internal standard or company choose that internal standard or company choose that internal standard or that interpretation? Did they over that interpretation? Did they over that interpretation? Did they over rotate to a point where it's very rotate to a point where it's very rotate to a point where it's very difficult and very demanding or do they difficult and very demanding or do they difficult and very demanding or do they take something that's a little bit more take something that's a little bit more take something that's a little bit more maybe sensible and like let's actually maybe sensible and like let's actually maybe sensible and like let's actually look at the risk in its totality because look at the risk in its totality because look at the risk in its totality because right now in a lot of cases we look at right now in a lot of cases we look at right now in a lot of cases we look at risk in a security construct alone and risk in a security construct alone and risk in a security construct alone and we don't consider anything else like if we don't consider anything else like if we don't consider anything else like if I have to fix all the things and if it I have to fix all the things and if it I have to fix all the things and if it causes my kernel to crash and I'm down causes my kernel to crash and I'm down causes my kernel to crash and I'm down for a week I don't care I don't have for a week I don't care I don't have for a week I don't care I don't have security well how does that make sense security well how does that make sense security well how does that make sense right I mean If I'm losing $1,000 a right I mean If I'm losing $1,000 a right I mean If I'm losing $1,000 a second on downtime, that's a lot more second on downtime, that's a lot more second on downtime, that's a lot more impactful to my business than some impactful to my business than some impactful to my business than some little low that's just sitting there little low that's just sitting there little low that's just sitting there going, "Hello, you can ignore me. going, "Hello, you can ignore me. going, "Hello, you can ignore me. Nothing to see here. I'm really boring." Nothing to see here. I'm really boring." Nothing to see here. I'm really boring." Right? And that's an internal Right? And that's an internal Right? And that's an internal interpretation of these uh compliance interpretation of these uh compliance interpretation of these uh compliance frameworks. So, like that right at Thank frameworks. So, like that right at Thank frameworks. So, like that right at Thank you very much.